//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ComplaintTool.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ComplaintEntities : DbContext
    {
        public ComplaintEntities()
            : base("name=ComplaintEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Complaint> Complaints { get; set; }
        public virtual DbSet<ComplaintAutomaticEvent> ComplaintAutomaticEvents { get; set; }
        public virtual DbSet<ComplaintDocument> ComplaintDocuments { get; set; }
        public virtual DbSet<ComplaintFinacialBalance> ComplaintFinacialBalances { get; set; }
        public virtual DbSet<ComplaintNote> ComplaintNotes { get; set; }
        public virtual DbSet<ComplaintRecord> ComplaintRecords { get; set; }
        public virtual DbSet<ComplaintStage> ComplaintStages { get; set; }
        public virtual DbSet<ComplaintStageDocument> ComplaintStageDocuments { get; set; }
        public virtual DbSet<ComplaintStageInternal> ComplaintStageInternals { get; set; }
        public virtual DbSet<ComplaintSuspended> ComplaintSuspendeds { get; set; }
        public virtual DbSet<ComplaintValue> ComplaintValues { get; set; }
        public virtual DbSet<GoodFaithLetter> GoodFaithLetters { get; set; }
        public virtual DbSet<GoodFaithLetterRecord> GoodFaithLetterRecords { get; set; }
        public virtual DbSet<GoodFaithLetterStage> GoodFaithLetterStages { get; set; }
        public virtual DbSet<GoodFaithLetterValue> GoodFaithLetterValues { get; set; }
        public virtual DbSet<IncomingTranMASTERCARD> IncomingTranMASTERCARDs { get; set; }
        public virtual DbSet<IncomingTranVISA> IncomingTranVISAs { get; set; }
        public virtual DbSet<RecoveryCard> RecoveryCards { get; set; }
        public virtual DbSet<RecoveryCardNote> RecoveryCardNotes { get; set; }
        public virtual DbSet<RecoveryCardRecord> RecoveryCardRecords { get; set; }
        public virtual DbSet<RecoveryCardStage> RecoveryCardStages { get; set; }
        public virtual DbSet<RecoveryCardValue> RecoveryCardValues { get; set; }
        public virtual DbSet<Temporary> Temporaries { get; set; }
        public virtual DbSet<BINList> BINLists { get; set; }
        public virtual DbSet<CaseCounter> CaseCounters { get; set; }
        public virtual DbSet<ExchangeFixedMASTERCARD> ExchangeFixedMASTERCARDs { get; set; }
        public virtual DbSet<ExchangeFixedVISA> ExchangeFixedVISAs { get; set; }
        public virtual DbSet<FeeConfiguration> FeeConfigurations { get; set; }
        public virtual DbSet<FeeValue> FeeValues { get; set; }
        public virtual DbSet<FilesEndPointDefinition> FilesEndPointDefinitions { get; set; }
        public virtual DbSet<HolidaysCalendar> HolidaysCalendars { get; set; }
        public virtual DbSet<InternalStageDefinition> InternalStageDefinitions { get; set; }
        public virtual DbSet<MappingValue> MappingValues { get; set; }
        public virtual DbSet<NotificationDefinition> NotificationDefinitions { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<OrganizationBrand> OrganizationBrands { get; set; }
        public virtual DbSet<Parameter> Parameters { get; set; }
        public virtual DbSet<ReasonCodeMapping> ReasonCodeMappings { get; set; }
        public virtual DbSet<Schedule> Schedules { get; set; }
        public virtual DbSet<StageDefinition> StageDefinitions { get; set; }
        public virtual DbSet<StageMappingIncoming> StageMappingIncomings { get; set; }
        public virtual DbSet<StageMappingOutgoing> StageMappingOutgoings { get; set; }
        public virtual DbSet<StageStep> StageSteps { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<AdjustmentType> AdjustmentTypes { get; set; }
        public virtual DbSet<Bin> Bins { get; set; }
        public virtual DbSet<CountryCode> CountryCodes { get; set; }
        public virtual DbSet<CurrencyCode> CurrencyCodes { get; set; }
        public virtual DbSet<FeeType> FeeTypes { get; set; }
        public virtual DbSet<FunctionCode> FunctionCodes { get; set; }
        public virtual DbSet<Issuer> Issuers { get; set; }
        public virtual DbSet<Mapping> Mappings { get; set; }
        public virtual DbSet<PickupType> PickupTypes { get; set; }
        public virtual DbSet<POLTaxOffice> POLTaxOffices { get; set; }
        public virtual DbSet<ReasonCode> ReasonCodes { get; set; }
        public virtual DbSet<ResponseCode> ResponseCodes { get; set; }
        public virtual DbSet<ViolationCode> ViolationCodes { get; set; }
        public virtual DbSet<Audit> Audits { get; set; }
        public virtual DbSet<CaseFilingIncomingBulkFile> CaseFilingIncomingBulkFiles { get; set; }
        public virtual DbSet<CaseFilingIncomingFile> CaseFilingIncomingFiles { get; set; }
        public virtual DbSet<CaseFilingIncomingFileDocumentItem> CaseFilingIncomingFileDocumentItems { get; set; }
        public virtual DbSet<CaseFilingOutgoingFile> CaseFilingOutgoingFiles { get; set; }
        public virtual DbSet<CaseFilingOutgoingFileDocumentItem> CaseFilingOutgoingFileDocumentItems { get; set; }
        public virtual DbSet<CaseFilingRecord> CaseFilingRecords { get; set; }
        public virtual DbSet<CLFReport> CLFReports { get; set; }
        public virtual DbSet<CLFReportItem> CLFReportItems { get; set; }
        public virtual DbSet<CRBReport> CRBReports { get; set; }
        public virtual DbSet<CRBReportItem> CRBReportItems { get; set; }
        public virtual DbSet<FilesStageNotification> FilesStageNotifications { get; set; }
        public virtual DbSet<NameList> NameLists { get; set; }
        public virtual DbSet<OutgoingPackage> OutgoingPackages { get; set; }
        public virtual DbSet<OutgoingPackageItem> OutgoingPackageItems { get; set; }
        public virtual DbSet<ParserKey> ParserKeys { get; set; }
        public virtual DbSet<RegOrgIncomingFile> RegOrgIncomingFiles { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<RecoveryCardList> RecoveryCardLists { get; set; }
        public virtual DbSet<DocumentExport> DocumentExports { get; set; }
        public virtual DbSet<DocumentExportReference> DocumentExportReferences { get; set; }
        public virtual DbSet<DocumentExtractExport> DocumentExtractExports { get; set; }
        public virtual DbSet<FeeCollection> FeeCollections { get; set; }
        public virtual DbSet<FeeCollectionExtract> FeeCollectionExtracts { get; set; }
        public virtual DbSet<FeeCollectionPostilionFile> FeeCollectionPostilionFiles { get; set; }
        public virtual DbSet<MemberMessageText> MemberMessageTexts { get; set; }
        public virtual DbSet<ProcessKey> ProcessKeys { get; set; }
        public virtual DbSet<Representment> Representments { get; set; }
        public virtual DbSet<RepresentmentCondition> RepresentmentConditions { get; set; }
        public virtual DbSet<RepresentmentDocument> RepresentmentDocuments { get; set; }
        public virtual DbSet<RepresentmentExtract> RepresentmentExtracts { get; set; }
        public virtual DbSet<RepresentmentExtractDocument> RepresentmentExtractDocuments { get; set; }
        public virtual DbSet<RepresentmentPostilionFile> RepresentmentPostilionFiles { get; set; }
        public virtual DbSet<ResponsePostilionFile> ResponsePostilionFiles { get; set; }
        public virtual DbSet<Affection> Affections { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<View_CBT_ADRESY> View_CBT_ADRESY { get; set; }
        public virtual DbSet<View_CBT_KLIENCI> View_CBT_KLIENCI { get; set; }
        public virtual DbSet<View_CBV_MIDBYTID> View_CBV_MIDBYTID { get; set; }
        public virtual DbSet<View_Complaints> View_Complaints { get; set; }
        public virtual DbSet<View_Documents> View_Documents { get; set; }
        public virtual DbSet<View_Last_Transaction_Card> View_Last_Transaction_Card { get; set; }
        public virtual DbSet<View_POSTILIONDATA> View_POSTILIONDATA { get; set; }
        public virtual DbSet<View_SELECTEDPOSTILIONDATA> View_SELECTEDPOSTILIONDATA { get; set; }
        public virtual DbSet<View_SL_KODY_POCZTOWE> View_SL_KODY_POCZTOWE { get; set; }
        public virtual DbSet<View_CurrencyCode> View_CurrencyCode { get; set; }
        public virtual DbSet<View_eservice_okp_ARDEF> View_eservice_okp_ARDEF { get; set; }
        public virtual DbSet<View_mcipm_ip0040t1> View_mcipm_ip0040t1 { get; set; }
    
        public virtual int AddNewCard(string caseId, string pAN, string pANExtention, Nullable<System.DateTimeOffset> insertDate, string insertUser)
        {
            var caseIdParameter = caseId != null ?
                new ObjectParameter("CaseId", caseId) :
                new ObjectParameter("CaseId", typeof(string));
    
            var pANParameter = pAN != null ?
                new ObjectParameter("PAN", pAN) :
                new ObjectParameter("PAN", typeof(string));
    
            var pANExtentionParameter = pANExtention != null ?
                new ObjectParameter("PANExtention", pANExtention) :
                new ObjectParameter("PANExtention", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTimeOffset));
    
            var insertUserParameter = insertUser != null ?
                new ObjectParameter("InsertUser", insertUser) :
                new ObjectParameter("InsertUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewCard", caseIdParameter, pANParameter, pANExtentionParameter, insertDateParameter, insertUserParameter);
        }
    
        public virtual int AddNewComplaint(string caseId, string bIN, string orgId, Nullable<long> incomingId, Nullable<System.DateTimeOffset> incomingDate, Nullable<long> postTranId, Nullable<System.DateTime> settlementDate, Nullable<System.DateTime> businessDate, string aRN, string pANMask, string pANHash, string pANExpirationDateMonth, string pANExpirationDateYear, string aCode, string transactionAmountSign, Nullable<decimal> transactionAmount, string transactionCurrencyCode, Nullable<System.DateTimeOffset> transactionDateTimeLocal, string brandName, string messageType, string reasonCode, string cardAcceptorIdCode, string pOSEntryMode, string documentationIndicator, string eCommerce, Nullable<bool> is3DSecure, Nullable<int> processingStatus, Nullable<bool> status, Nullable<System.DateTimeOffset> statusDate, Nullable<bool> close, Nullable<System.DateTimeOffset> closeDate, Nullable<bool> postilionData, string participantId, string sourceCountryCode, Nullable<System.DateTimeOffset> insertDate, string insertUser)
        {
            var caseIdParameter = caseId != null ?
                new ObjectParameter("CaseId", caseId) :
                new ObjectParameter("CaseId", typeof(string));
    
            var bINParameter = bIN != null ?
                new ObjectParameter("BIN", bIN) :
                new ObjectParameter("BIN", typeof(string));
    
            var orgIdParameter = orgId != null ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(string));
    
            var incomingIdParameter = incomingId.HasValue ?
                new ObjectParameter("IncomingId", incomingId) :
                new ObjectParameter("IncomingId", typeof(long));
    
            var incomingDateParameter = incomingDate.HasValue ?
                new ObjectParameter("IncomingDate", incomingDate) :
                new ObjectParameter("IncomingDate", typeof(System.DateTimeOffset));
    
            var postTranIdParameter = postTranId.HasValue ?
                new ObjectParameter("PostTranId", postTranId) :
                new ObjectParameter("PostTranId", typeof(long));
    
            var settlementDateParameter = settlementDate.HasValue ?
                new ObjectParameter("SettlementDate", settlementDate) :
                new ObjectParameter("SettlementDate", typeof(System.DateTime));
    
            var businessDateParameter = businessDate.HasValue ?
                new ObjectParameter("BusinessDate", businessDate) :
                new ObjectParameter("BusinessDate", typeof(System.DateTime));
    
            var aRNParameter = aRN != null ?
                new ObjectParameter("ARN", aRN) :
                new ObjectParameter("ARN", typeof(string));
    
            var pANMaskParameter = pANMask != null ?
                new ObjectParameter("PANMask", pANMask) :
                new ObjectParameter("PANMask", typeof(string));
    
            var pANHashParameter = pANHash != null ?
                new ObjectParameter("PANHash", pANHash) :
                new ObjectParameter("PANHash", typeof(string));
    
            var pANExpirationDateMonthParameter = pANExpirationDateMonth != null ?
                new ObjectParameter("PANExpirationDateMonth", pANExpirationDateMonth) :
                new ObjectParameter("PANExpirationDateMonth", typeof(string));
    
            var pANExpirationDateYearParameter = pANExpirationDateYear != null ?
                new ObjectParameter("PANExpirationDateYear", pANExpirationDateYear) :
                new ObjectParameter("PANExpirationDateYear", typeof(string));
    
            var aCodeParameter = aCode != null ?
                new ObjectParameter("ACode", aCode) :
                new ObjectParameter("ACode", typeof(string));
    
            var transactionAmountSignParameter = transactionAmountSign != null ?
                new ObjectParameter("TransactionAmountSign", transactionAmountSign) :
                new ObjectParameter("TransactionAmountSign", typeof(string));
    
            var transactionAmountParameter = transactionAmount.HasValue ?
                new ObjectParameter("TransactionAmount", transactionAmount) :
                new ObjectParameter("TransactionAmount", typeof(decimal));
    
            var transactionCurrencyCodeParameter = transactionCurrencyCode != null ?
                new ObjectParameter("TransactionCurrencyCode", transactionCurrencyCode) :
                new ObjectParameter("TransactionCurrencyCode", typeof(string));
    
            var transactionDateTimeLocalParameter = transactionDateTimeLocal.HasValue ?
                new ObjectParameter("TransactionDateTimeLocal", transactionDateTimeLocal) :
                new ObjectParameter("TransactionDateTimeLocal", typeof(System.DateTimeOffset));
    
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            var messageTypeParameter = messageType != null ?
                new ObjectParameter("MessageType", messageType) :
                new ObjectParameter("MessageType", typeof(string));
    
            var reasonCodeParameter = reasonCode != null ?
                new ObjectParameter("ReasonCode", reasonCode) :
                new ObjectParameter("ReasonCode", typeof(string));
    
            var cardAcceptorIdCodeParameter = cardAcceptorIdCode != null ?
                new ObjectParameter("CardAcceptorIdCode", cardAcceptorIdCode) :
                new ObjectParameter("CardAcceptorIdCode", typeof(string));
    
            var pOSEntryModeParameter = pOSEntryMode != null ?
                new ObjectParameter("POSEntryMode", pOSEntryMode) :
                new ObjectParameter("POSEntryMode", typeof(string));
    
            var documentationIndicatorParameter = documentationIndicator != null ?
                new ObjectParameter("DocumentationIndicator", documentationIndicator) :
                new ObjectParameter("DocumentationIndicator", typeof(string));
    
            var eCommerceParameter = eCommerce != null ?
                new ObjectParameter("ECommerce", eCommerce) :
                new ObjectParameter("ECommerce", typeof(string));
    
            var is3DSecureParameter = is3DSecure.HasValue ?
                new ObjectParameter("Is3DSecure", is3DSecure) :
                new ObjectParameter("Is3DSecure", typeof(bool));
    
            var processingStatusParameter = processingStatus.HasValue ?
                new ObjectParameter("ProcessingStatus", processingStatus) :
                new ObjectParameter("ProcessingStatus", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var statusDateParameter = statusDate.HasValue ?
                new ObjectParameter("StatusDate", statusDate) :
                new ObjectParameter("StatusDate", typeof(System.DateTimeOffset));
    
            var closeParameter = close.HasValue ?
                new ObjectParameter("Close", close) :
                new ObjectParameter("Close", typeof(bool));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTimeOffset));
    
            var postilionDataParameter = postilionData.HasValue ?
                new ObjectParameter("PostilionData", postilionData) :
                new ObjectParameter("PostilionData", typeof(bool));
    
            var participantIdParameter = participantId != null ?
                new ObjectParameter("ParticipantId", participantId) :
                new ObjectParameter("ParticipantId", typeof(string));
    
            var sourceCountryCodeParameter = sourceCountryCode != null ?
                new ObjectParameter("SourceCountryCode", sourceCountryCode) :
                new ObjectParameter("SourceCountryCode", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTimeOffset));
    
            var insertUserParameter = insertUser != null ?
                new ObjectParameter("InsertUser", insertUser) :
                new ObjectParameter("InsertUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewComplaint", caseIdParameter, bINParameter, orgIdParameter, incomingIdParameter, incomingDateParameter, postTranIdParameter, settlementDateParameter, businessDateParameter, aRNParameter, pANMaskParameter, pANHashParameter, pANExpirationDateMonthParameter, pANExpirationDateYearParameter, aCodeParameter, transactionAmountSignParameter, transactionAmountParameter, transactionCurrencyCodeParameter, transactionDateTimeLocalParameter, brandNameParameter, messageTypeParameter, reasonCodeParameter, cardAcceptorIdCodeParameter, pOSEntryModeParameter, documentationIndicatorParameter, eCommerceParameter, is3DSecureParameter, processingStatusParameter, statusParameter, statusDateParameter, closeParameter, closeDateParameter, postilionDataParameter, participantIdParameter, sourceCountryCodeParameter, insertDateParameter, insertUserParameter);
        }
    
        public virtual int AddNewComplaintFinacialBalance(string caseId, Nullable<long> stageId, Nullable<long> internalStageId, string mID, Nullable<decimal> debitAmount, Nullable<decimal> creditAmount, string currencyCodeAmount, Nullable<decimal> euroDebitAmount, Nullable<decimal> euroCreditAmount, Nullable<System.DateTime> exchangeDate, Nullable<bool> isPartial, Nullable<System.DateTime> finacialDate, string description, Nullable<System.DateTimeOffset> insertDate, string insertUser, ObjectParameter finacialBalanceId)
        {
            var caseIdParameter = caseId != null ?
                new ObjectParameter("CaseId", caseId) :
                new ObjectParameter("CaseId", typeof(string));
    
            var stageIdParameter = stageId.HasValue ?
                new ObjectParameter("StageId", stageId) :
                new ObjectParameter("StageId", typeof(long));
    
            var internalStageIdParameter = internalStageId.HasValue ?
                new ObjectParameter("InternalStageId", internalStageId) :
                new ObjectParameter("InternalStageId", typeof(long));
    
            var mIDParameter = mID != null ?
                new ObjectParameter("MID", mID) :
                new ObjectParameter("MID", typeof(string));
    
            var debitAmountParameter = debitAmount.HasValue ?
                new ObjectParameter("DebitAmount", debitAmount) :
                new ObjectParameter("DebitAmount", typeof(decimal));
    
            var creditAmountParameter = creditAmount.HasValue ?
                new ObjectParameter("CreditAmount", creditAmount) :
                new ObjectParameter("CreditAmount", typeof(decimal));
    
            var currencyCodeAmountParameter = currencyCodeAmount != null ?
                new ObjectParameter("CurrencyCodeAmount", currencyCodeAmount) :
                new ObjectParameter("CurrencyCodeAmount", typeof(string));
    
            var euroDebitAmountParameter = euroDebitAmount.HasValue ?
                new ObjectParameter("EuroDebitAmount", euroDebitAmount) :
                new ObjectParameter("EuroDebitAmount", typeof(decimal));
    
            var euroCreditAmountParameter = euroCreditAmount.HasValue ?
                new ObjectParameter("EuroCreditAmount", euroCreditAmount) :
                new ObjectParameter("EuroCreditAmount", typeof(decimal));
    
            var exchangeDateParameter = exchangeDate.HasValue ?
                new ObjectParameter("ExchangeDate", exchangeDate) :
                new ObjectParameter("ExchangeDate", typeof(System.DateTime));
    
            var isPartialParameter = isPartial.HasValue ?
                new ObjectParameter("IsPartial", isPartial) :
                new ObjectParameter("IsPartial", typeof(bool));
    
            var finacialDateParameter = finacialDate.HasValue ?
                new ObjectParameter("FinacialDate", finacialDate) :
                new ObjectParameter("FinacialDate", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTimeOffset));
    
            var insertUserParameter = insertUser != null ?
                new ObjectParameter("InsertUser", insertUser) :
                new ObjectParameter("InsertUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewComplaintFinacialBalance", caseIdParameter, stageIdParameter, internalStageIdParameter, mIDParameter, debitAmountParameter, creditAmountParameter, currencyCodeAmountParameter, euroDebitAmountParameter, euroCreditAmountParameter, exchangeDateParameter, isPartialParameter, finacialDateParameter, descriptionParameter, insertDateParameter, insertUserParameter, finacialBalanceId);
        }
    
        public virtual int AddNewComplaintRecord(string caseId, Nullable<long> stageId, Nullable<long> incomingId, string mTI, string functionCode, string messageReversalIndicator, string transactionCode, string mCC, string posTerminalType, string posCardDataInputMode, string stageCode, Nullable<System.DateTimeOffset> stageDate, string narritive, string posCardPresent, string posCardholderPresent, string posCardholderAuthMethod, Nullable<System.DateTimeOffset> giccRevDate, Nullable<decimal> settleAmountImpact, Nullable<decimal> tranAmountReq, Nullable<long> prevPostTranId, string reasonCode, string systemTraceAuditNr, Nullable<System.DateTime> datetimeTranLocal, string expiryDate, string merchantType, string pOSEntryMode, string cardSeqNr, string posConditionCode, string retrievalReferenceNr, string authIDRsp, string rspCodeRsp, string serviceRestrictionCode, string terminalID, string cardAcceptorIDCode, string cardAcceptorNameLoc, string posCardDataInputAbility, string posCardholderAuthAbility, string posCardCaptureAbility, string posOperatingEnvironment, string posCardholderAuthEntity, string posCardDataOutputAbility, string posTerminalOutputAbility, string posPinCaptureAbility, string posTerminalOperator, string ucafData, string tranAmountRsp, string tranType, string processingCode, string kKOCbReference, string tranLifeCycleID, string iRD, string assignedID, string fraudNotificationDate, string transactionId, string multiClearingSeqNr, string multiClearingSeqCnt, string authSourceCode, string aVSRspCode, string marketSpecAuth, string authRspCode, string messageType, string prevMessageType, string prevUcafData, string structuredDataReq, Nullable<System.DateTime> dateTimeRsp, Nullable<int> insertMode, Nullable<System.DateTimeOffset> insertDate, string insertUser, ObjectParameter recordId)
        {
            var caseIdParameter = caseId != null ?
                new ObjectParameter("CaseId", caseId) :
                new ObjectParameter("CaseId", typeof(string));
    
            var stageIdParameter = stageId.HasValue ?
                new ObjectParameter("StageId", stageId) :
                new ObjectParameter("StageId", typeof(long));
    
            var incomingIdParameter = incomingId.HasValue ?
                new ObjectParameter("IncomingId", incomingId) :
                new ObjectParameter("IncomingId", typeof(long));
    
            var mTIParameter = mTI != null ?
                new ObjectParameter("MTI", mTI) :
                new ObjectParameter("MTI", typeof(string));
    
            var functionCodeParameter = functionCode != null ?
                new ObjectParameter("FunctionCode", functionCode) :
                new ObjectParameter("FunctionCode", typeof(string));
    
            var messageReversalIndicatorParameter = messageReversalIndicator != null ?
                new ObjectParameter("MessageReversalIndicator", messageReversalIndicator) :
                new ObjectParameter("MessageReversalIndicator", typeof(string));
    
            var transactionCodeParameter = transactionCode != null ?
                new ObjectParameter("TransactionCode", transactionCode) :
                new ObjectParameter("TransactionCode", typeof(string));
    
            var mCCParameter = mCC != null ?
                new ObjectParameter("MCC", mCC) :
                new ObjectParameter("MCC", typeof(string));
    
            var posTerminalTypeParameter = posTerminalType != null ?
                new ObjectParameter("PosTerminalType", posTerminalType) :
                new ObjectParameter("PosTerminalType", typeof(string));
    
            var posCardDataInputModeParameter = posCardDataInputMode != null ?
                new ObjectParameter("PosCardDataInputMode", posCardDataInputMode) :
                new ObjectParameter("PosCardDataInputMode", typeof(string));
    
            var stageCodeParameter = stageCode != null ?
                new ObjectParameter("StageCode", stageCode) :
                new ObjectParameter("StageCode", typeof(string));
    
            var stageDateParameter = stageDate.HasValue ?
                new ObjectParameter("StageDate", stageDate) :
                new ObjectParameter("StageDate", typeof(System.DateTimeOffset));
    
            var narritiveParameter = narritive != null ?
                new ObjectParameter("Narritive", narritive) :
                new ObjectParameter("Narritive", typeof(string));
    
            var posCardPresentParameter = posCardPresent != null ?
                new ObjectParameter("PosCardPresent", posCardPresent) :
                new ObjectParameter("PosCardPresent", typeof(string));
    
            var posCardholderPresentParameter = posCardholderPresent != null ?
                new ObjectParameter("PosCardholderPresent", posCardholderPresent) :
                new ObjectParameter("PosCardholderPresent", typeof(string));
    
            var posCardholderAuthMethodParameter = posCardholderAuthMethod != null ?
                new ObjectParameter("PosCardholderAuthMethod", posCardholderAuthMethod) :
                new ObjectParameter("PosCardholderAuthMethod", typeof(string));
    
            var giccRevDateParameter = giccRevDate.HasValue ?
                new ObjectParameter("GiccRevDate", giccRevDate) :
                new ObjectParameter("GiccRevDate", typeof(System.DateTimeOffset));
    
            var settleAmountImpactParameter = settleAmountImpact.HasValue ?
                new ObjectParameter("SettleAmountImpact", settleAmountImpact) :
                new ObjectParameter("SettleAmountImpact", typeof(decimal));
    
            var tranAmountReqParameter = tranAmountReq.HasValue ?
                new ObjectParameter("TranAmountReq", tranAmountReq) :
                new ObjectParameter("TranAmountReq", typeof(decimal));
    
            var prevPostTranIdParameter = prevPostTranId.HasValue ?
                new ObjectParameter("PrevPostTranId", prevPostTranId) :
                new ObjectParameter("PrevPostTranId", typeof(long));
    
            var reasonCodeParameter = reasonCode != null ?
                new ObjectParameter("ReasonCode", reasonCode) :
                new ObjectParameter("ReasonCode", typeof(string));
    
            var systemTraceAuditNrParameter = systemTraceAuditNr != null ?
                new ObjectParameter("SystemTraceAuditNr", systemTraceAuditNr) :
                new ObjectParameter("SystemTraceAuditNr", typeof(string));
    
            var datetimeTranLocalParameter = datetimeTranLocal.HasValue ?
                new ObjectParameter("DatetimeTranLocal", datetimeTranLocal) :
                new ObjectParameter("DatetimeTranLocal", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate != null ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(string));
    
            var merchantTypeParameter = merchantType != null ?
                new ObjectParameter("MerchantType", merchantType) :
                new ObjectParameter("MerchantType", typeof(string));
    
            var pOSEntryModeParameter = pOSEntryMode != null ?
                new ObjectParameter("POSEntryMode", pOSEntryMode) :
                new ObjectParameter("POSEntryMode", typeof(string));
    
            var cardSeqNrParameter = cardSeqNr != null ?
                new ObjectParameter("CardSeqNr", cardSeqNr) :
                new ObjectParameter("CardSeqNr", typeof(string));
    
            var posConditionCodeParameter = posConditionCode != null ?
                new ObjectParameter("PosConditionCode", posConditionCode) :
                new ObjectParameter("PosConditionCode", typeof(string));
    
            var retrievalReferenceNrParameter = retrievalReferenceNr != null ?
                new ObjectParameter("RetrievalReferenceNr", retrievalReferenceNr) :
                new ObjectParameter("RetrievalReferenceNr", typeof(string));
    
            var authIDRspParameter = authIDRsp != null ?
                new ObjectParameter("AuthIDRsp", authIDRsp) :
                new ObjectParameter("AuthIDRsp", typeof(string));
    
            var rspCodeRspParameter = rspCodeRsp != null ?
                new ObjectParameter("RspCodeRsp", rspCodeRsp) :
                new ObjectParameter("RspCodeRsp", typeof(string));
    
            var serviceRestrictionCodeParameter = serviceRestrictionCode != null ?
                new ObjectParameter("ServiceRestrictionCode", serviceRestrictionCode) :
                new ObjectParameter("ServiceRestrictionCode", typeof(string));
    
            var terminalIDParameter = terminalID != null ?
                new ObjectParameter("TerminalID", terminalID) :
                new ObjectParameter("TerminalID", typeof(string));
    
            var cardAcceptorIDCodeParameter = cardAcceptorIDCode != null ?
                new ObjectParameter("CardAcceptorIDCode", cardAcceptorIDCode) :
                new ObjectParameter("CardAcceptorIDCode", typeof(string));
    
            var cardAcceptorNameLocParameter = cardAcceptorNameLoc != null ?
                new ObjectParameter("CardAcceptorNameLoc", cardAcceptorNameLoc) :
                new ObjectParameter("CardAcceptorNameLoc", typeof(string));
    
            var posCardDataInputAbilityParameter = posCardDataInputAbility != null ?
                new ObjectParameter("PosCardDataInputAbility", posCardDataInputAbility) :
                new ObjectParameter("PosCardDataInputAbility", typeof(string));
    
            var posCardholderAuthAbilityParameter = posCardholderAuthAbility != null ?
                new ObjectParameter("PosCardholderAuthAbility", posCardholderAuthAbility) :
                new ObjectParameter("PosCardholderAuthAbility", typeof(string));
    
            var posCardCaptureAbilityParameter = posCardCaptureAbility != null ?
                new ObjectParameter("PosCardCaptureAbility", posCardCaptureAbility) :
                new ObjectParameter("PosCardCaptureAbility", typeof(string));
    
            var posOperatingEnvironmentParameter = posOperatingEnvironment != null ?
                new ObjectParameter("PosOperatingEnvironment", posOperatingEnvironment) :
                new ObjectParameter("PosOperatingEnvironment", typeof(string));
    
            var posCardholderAuthEntityParameter = posCardholderAuthEntity != null ?
                new ObjectParameter("PosCardholderAuthEntity", posCardholderAuthEntity) :
                new ObjectParameter("PosCardholderAuthEntity", typeof(string));
    
            var posCardDataOutputAbilityParameter = posCardDataOutputAbility != null ?
                new ObjectParameter("PosCardDataOutputAbility", posCardDataOutputAbility) :
                new ObjectParameter("PosCardDataOutputAbility", typeof(string));
    
            var posTerminalOutputAbilityParameter = posTerminalOutputAbility != null ?
                new ObjectParameter("PosTerminalOutputAbility", posTerminalOutputAbility) :
                new ObjectParameter("PosTerminalOutputAbility", typeof(string));
    
            var posPinCaptureAbilityParameter = posPinCaptureAbility != null ?
                new ObjectParameter("PosPinCaptureAbility", posPinCaptureAbility) :
                new ObjectParameter("PosPinCaptureAbility", typeof(string));
    
            var posTerminalOperatorParameter = posTerminalOperator != null ?
                new ObjectParameter("PosTerminalOperator", posTerminalOperator) :
                new ObjectParameter("PosTerminalOperator", typeof(string));
    
            var ucafDataParameter = ucafData != null ?
                new ObjectParameter("UcafData", ucafData) :
                new ObjectParameter("UcafData", typeof(string));
    
            var tranAmountRspParameter = tranAmountRsp != null ?
                new ObjectParameter("TranAmountRsp", tranAmountRsp) :
                new ObjectParameter("TranAmountRsp", typeof(string));
    
            var tranTypeParameter = tranType != null ?
                new ObjectParameter("TranType", tranType) :
                new ObjectParameter("TranType", typeof(string));
    
            var processingCodeParameter = processingCode != null ?
                new ObjectParameter("ProcessingCode", processingCode) :
                new ObjectParameter("ProcessingCode", typeof(string));
    
            var kKOCbReferenceParameter = kKOCbReference != null ?
                new ObjectParameter("KKOCbReference", kKOCbReference) :
                new ObjectParameter("KKOCbReference", typeof(string));
    
            var tranLifeCycleIDParameter = tranLifeCycleID != null ?
                new ObjectParameter("TranLifeCycleID", tranLifeCycleID) :
                new ObjectParameter("TranLifeCycleID", typeof(string));
    
            var iRDParameter = iRD != null ?
                new ObjectParameter("IRD", iRD) :
                new ObjectParameter("IRD", typeof(string));
    
            var assignedIDParameter = assignedID != null ?
                new ObjectParameter("AssignedID", assignedID) :
                new ObjectParameter("AssignedID", typeof(string));
    
            var fraudNotificationDateParameter = fraudNotificationDate != null ?
                new ObjectParameter("FraudNotificationDate", fraudNotificationDate) :
                new ObjectParameter("FraudNotificationDate", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var multiClearingSeqNrParameter = multiClearingSeqNr != null ?
                new ObjectParameter("MultiClearingSeqNr", multiClearingSeqNr) :
                new ObjectParameter("MultiClearingSeqNr", typeof(string));
    
            var multiClearingSeqCntParameter = multiClearingSeqCnt != null ?
                new ObjectParameter("MultiClearingSeqCnt", multiClearingSeqCnt) :
                new ObjectParameter("MultiClearingSeqCnt", typeof(string));
    
            var authSourceCodeParameter = authSourceCode != null ?
                new ObjectParameter("AuthSourceCode", authSourceCode) :
                new ObjectParameter("AuthSourceCode", typeof(string));
    
            var aVSRspCodeParameter = aVSRspCode != null ?
                new ObjectParameter("AVSRspCode", aVSRspCode) :
                new ObjectParameter("AVSRspCode", typeof(string));
    
            var marketSpecAuthParameter = marketSpecAuth != null ?
                new ObjectParameter("MarketSpecAuth", marketSpecAuth) :
                new ObjectParameter("MarketSpecAuth", typeof(string));
    
            var authRspCodeParameter = authRspCode != null ?
                new ObjectParameter("AuthRspCode", authRspCode) :
                new ObjectParameter("AuthRspCode", typeof(string));
    
            var messageTypeParameter = messageType != null ?
                new ObjectParameter("MessageType", messageType) :
                new ObjectParameter("MessageType", typeof(string));
    
            var prevMessageTypeParameter = prevMessageType != null ?
                new ObjectParameter("PrevMessageType", prevMessageType) :
                new ObjectParameter("PrevMessageType", typeof(string));
    
            var prevUcafDataParameter = prevUcafData != null ?
                new ObjectParameter("PrevUcafData", prevUcafData) :
                new ObjectParameter("PrevUcafData", typeof(string));
    
            var structuredDataReqParameter = structuredDataReq != null ?
                new ObjectParameter("StructuredDataReq", structuredDataReq) :
                new ObjectParameter("StructuredDataReq", typeof(string));
    
            var dateTimeRspParameter = dateTimeRsp.HasValue ?
                new ObjectParameter("DateTimeRsp", dateTimeRsp) :
                new ObjectParameter("DateTimeRsp", typeof(System.DateTime));
    
            var insertModeParameter = insertMode.HasValue ?
                new ObjectParameter("InsertMode", insertMode) :
                new ObjectParameter("InsertMode", typeof(int));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTimeOffset));
    
            var insertUserParameter = insertUser != null ?
                new ObjectParameter("InsertUser", insertUser) :
                new ObjectParameter("InsertUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewComplaintRecord", caseIdParameter, stageIdParameter, incomingIdParameter, mTIParameter, functionCodeParameter, messageReversalIndicatorParameter, transactionCodeParameter, mCCParameter, posTerminalTypeParameter, posCardDataInputModeParameter, stageCodeParameter, stageDateParameter, narritiveParameter, posCardPresentParameter, posCardholderPresentParameter, posCardholderAuthMethodParameter, giccRevDateParameter, settleAmountImpactParameter, tranAmountReqParameter, prevPostTranIdParameter, reasonCodeParameter, systemTraceAuditNrParameter, datetimeTranLocalParameter, expiryDateParameter, merchantTypeParameter, pOSEntryModeParameter, cardSeqNrParameter, posConditionCodeParameter, retrievalReferenceNrParameter, authIDRspParameter, rspCodeRspParameter, serviceRestrictionCodeParameter, terminalIDParameter, cardAcceptorIDCodeParameter, cardAcceptorNameLocParameter, posCardDataInputAbilityParameter, posCardholderAuthAbilityParameter, posCardCaptureAbilityParameter, posOperatingEnvironmentParameter, posCardholderAuthEntityParameter, posCardDataOutputAbilityParameter, posTerminalOutputAbilityParameter, posPinCaptureAbilityParameter, posTerminalOperatorParameter, ucafDataParameter, tranAmountRspParameter, tranTypeParameter, processingCodeParameter, kKOCbReferenceParameter, tranLifeCycleIDParameter, iRDParameter, assignedIDParameter, fraudNotificationDateParameter, transactionIdParameter, multiClearingSeqNrParameter, multiClearingSeqCntParameter, authSourceCodeParameter, aVSRspCodeParameter, marketSpecAuthParameter, authRspCodeParameter, messageTypeParameter, prevMessageTypeParameter, prevUcafDataParameter, structuredDataReqParameter, dateTimeRspParameter, insertModeParameter, insertDateParameter, insertUserParameter, recordId);
        }
    
        public virtual int AddNewComplaintStage(string caseId, Nullable<long> incomingId, Nullable<System.DateTimeOffset> incomingDate, Nullable<System.DateTime> settlementDate, Nullable<System.DateTime> businessDate, string reasonCode, Nullable<bool> documentationIndicator, Nullable<int> definitionStageId, string stageCode, Nullable<System.DateTimeOffset> stageDate, Nullable<System.DateTimeOffset> stageEndDate, string memberMessageText, Nullable<System.DateTimeOffset> insertDate, string insertUser, ObjectParameter stageId)
        {
            var caseIdParameter = caseId != null ?
                new ObjectParameter("CaseId", caseId) :
                new ObjectParameter("CaseId", typeof(string));
    
            var incomingIdParameter = incomingId.HasValue ?
                new ObjectParameter("IncomingId", incomingId) :
                new ObjectParameter("IncomingId", typeof(long));
    
            var incomingDateParameter = incomingDate.HasValue ?
                new ObjectParameter("IncomingDate", incomingDate) :
                new ObjectParameter("IncomingDate", typeof(System.DateTimeOffset));
    
            var settlementDateParameter = settlementDate.HasValue ?
                new ObjectParameter("SettlementDate", settlementDate) :
                new ObjectParameter("SettlementDate", typeof(System.DateTime));
    
            var businessDateParameter = businessDate.HasValue ?
                new ObjectParameter("BusinessDate", businessDate) :
                new ObjectParameter("BusinessDate", typeof(System.DateTime));
    
            var reasonCodeParameter = reasonCode != null ?
                new ObjectParameter("ReasonCode", reasonCode) :
                new ObjectParameter("ReasonCode", typeof(string));
    
            var documentationIndicatorParameter = documentationIndicator.HasValue ?
                new ObjectParameter("DocumentationIndicator", documentationIndicator) :
                new ObjectParameter("DocumentationIndicator", typeof(bool));
    
            var definitionStageIdParameter = definitionStageId.HasValue ?
                new ObjectParameter("DefinitionStageId", definitionStageId) :
                new ObjectParameter("DefinitionStageId", typeof(int));
    
            var stageCodeParameter = stageCode != null ?
                new ObjectParameter("StageCode", stageCode) :
                new ObjectParameter("StageCode", typeof(string));
    
            var stageDateParameter = stageDate.HasValue ?
                new ObjectParameter("StageDate", stageDate) :
                new ObjectParameter("StageDate", typeof(System.DateTimeOffset));
    
            var stageEndDateParameter = stageEndDate.HasValue ?
                new ObjectParameter("StageEndDate", stageEndDate) :
                new ObjectParameter("StageEndDate", typeof(System.DateTimeOffset));
    
            var memberMessageTextParameter = memberMessageText != null ?
                new ObjectParameter("MemberMessageText", memberMessageText) :
                new ObjectParameter("MemberMessageText", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTimeOffset));
    
            var insertUserParameter = insertUser != null ?
                new ObjectParameter("InsertUser", insertUser) :
                new ObjectParameter("InsertUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewComplaintStage", caseIdParameter, incomingIdParameter, incomingDateParameter, settlementDateParameter, businessDateParameter, reasonCodeParameter, documentationIndicatorParameter, definitionStageIdParameter, stageCodeParameter, stageDateParameter, stageEndDateParameter, memberMessageTextParameter, insertDateParameter, insertUserParameter, stageId);
        }
    
        public virtual int AddNewComplaintValue(string caseId, Nullable<long> stageId, Nullable<long> incomingId, string stageAmountSign, Nullable<decimal> stageAmount, string stageCurrencyCode, string bookingAmountSign, Nullable<decimal> bookingAmount, string bookingCurrencyCode, Nullable<bool> isPartial, string debitCredit, string euroBookingAmountSign, Nullable<decimal> euroBookingAmount, Nullable<System.DateTimeOffset> insertDate, string insertUser, ObjectParameter valueId)
        {
            var caseIdParameter = caseId != null ?
                new ObjectParameter("CaseId", caseId) :
                new ObjectParameter("CaseId", typeof(string));
    
            var stageIdParameter = stageId.HasValue ?
                new ObjectParameter("StageId", stageId) :
                new ObjectParameter("StageId", typeof(long));
    
            var incomingIdParameter = incomingId.HasValue ?
                new ObjectParameter("IncomingId", incomingId) :
                new ObjectParameter("IncomingId", typeof(long));
    
            var stageAmountSignParameter = stageAmountSign != null ?
                new ObjectParameter("StageAmountSign", stageAmountSign) :
                new ObjectParameter("StageAmountSign", typeof(string));
    
            var stageAmountParameter = stageAmount.HasValue ?
                new ObjectParameter("StageAmount", stageAmount) :
                new ObjectParameter("StageAmount", typeof(decimal));
    
            var stageCurrencyCodeParameter = stageCurrencyCode != null ?
                new ObjectParameter("StageCurrencyCode", stageCurrencyCode) :
                new ObjectParameter("StageCurrencyCode", typeof(string));
    
            var bookingAmountSignParameter = bookingAmountSign != null ?
                new ObjectParameter("BookingAmountSign", bookingAmountSign) :
                new ObjectParameter("BookingAmountSign", typeof(string));
    
            var bookingAmountParameter = bookingAmount.HasValue ?
                new ObjectParameter("BookingAmount", bookingAmount) :
                new ObjectParameter("BookingAmount", typeof(decimal));
    
            var bookingCurrencyCodeParameter = bookingCurrencyCode != null ?
                new ObjectParameter("BookingCurrencyCode", bookingCurrencyCode) :
                new ObjectParameter("BookingCurrencyCode", typeof(string));
    
            var isPartialParameter = isPartial.HasValue ?
                new ObjectParameter("IsPartial", isPartial) :
                new ObjectParameter("IsPartial", typeof(bool));
    
            var debitCreditParameter = debitCredit != null ?
                new ObjectParameter("DebitCredit", debitCredit) :
                new ObjectParameter("DebitCredit", typeof(string));
    
            var euroBookingAmountSignParameter = euroBookingAmountSign != null ?
                new ObjectParameter("EuroBookingAmountSign", euroBookingAmountSign) :
                new ObjectParameter("EuroBookingAmountSign", typeof(string));
    
            var euroBookingAmountParameter = euroBookingAmount.HasValue ?
                new ObjectParameter("EuroBookingAmount", euroBookingAmount) :
                new ObjectParameter("EuroBookingAmount", typeof(decimal));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTimeOffset));
    
            var insertUserParameter = insertUser != null ?
                new ObjectParameter("InsertUser", insertUser) :
                new ObjectParameter("InsertUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewComplaintValue", caseIdParameter, stageIdParameter, incomingIdParameter, stageAmountSignParameter, stageAmountParameter, stageCurrencyCodeParameter, bookingAmountSignParameter, bookingAmountParameter, bookingCurrencyCodeParameter, isPartialParameter, debitCreditParameter, euroBookingAmountSignParameter, euroBookingAmountParameter, insertDateParameter, insertUserParameter, valueId);
        }
    
        public virtual int GetDocument(Nullable<long> documentId, ObjectParameter file_name, ObjectParameter file_stream)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDocument", documentIdParameter, file_name, file_stream);
        }
    
        public virtual int GetNewCaseId(string organizationId, Nullable<System.DateTime> incomingDay, string suffix, ObjectParameter caseId)
        {
            var organizationIdParameter = organizationId != null ?
                new ObjectParameter("OrganizationId", organizationId) :
                new ObjectParameter("OrganizationId", typeof(string));
    
            var incomingDayParameter = incomingDay.HasValue ?
                new ObjectParameter("IncomingDay", incomingDay) :
                new ObjectParameter("IncomingDay", typeof(System.DateTime));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNewCaseId", organizationIdParameter, incomingDayParameter, suffixParameter, caseId);
        }
    
        public virtual int GetPANbyCaseId(string caseId, ObjectParameter pAN, ObjectParameter pANExtention)
        {
            var caseIdParameter = caseId != null ?
                new ObjectParameter("CaseId", caseId) :
                new ObjectParameter("CaseId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPANbyCaseId", caseIdParameter, pAN, pANExtention);
        }
    
        public virtual ObjectResult<Nullable<int>> GetPostilionData(string arn, string panfirst6, string panlast4)
        {
            var arnParameter = arn != null ?
                new ObjectParameter("arn", arn) :
                new ObjectParameter("arn", typeof(string));
    
            var panfirst6Parameter = panfirst6 != null ?
                new ObjectParameter("panfirst6", panfirst6) :
                new ObjectParameter("panfirst6", typeof(string));
    
            var panlast4Parameter = panlast4 != null ?
                new ObjectParameter("panlast4", panlast4) :
                new ObjectParameter("panlast4", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetPostilionData", arnParameter, panfirst6Parameter, panlast4Parameter);
        }
    
        public virtual int MakeManualRepresentment(string arnNumber)
        {
            var arnNumberParameter = arnNumber != null ?
                new ObjectParameter("ArnNumber", arnNumber) :
                new ObjectParameter("ArnNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MakeManualRepresentment", arnNumberParameter);
        }
    
        public virtual int HlpGetParticipantId(string arnNumber, ObjectParameter returnParticipantId)
        {
            var arnNumberParameter = arnNumber != null ?
                new ObjectParameter("ArnNumber", arnNumber) :
                new ObjectParameter("ArnNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HlpGetParticipantId", arnNumberParameter, returnParticipantId);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> AddDocument(Nullable<System.Guid> file_stream_id, byte[] file_stream, string file_name)
        {
            var file_stream_idParameter = file_stream_id.HasValue ?
                new ObjectParameter("file_stream_id", file_stream_id) :
                new ObjectParameter("file_stream_id", typeof(System.Guid));
    
            var file_streamParameter = file_stream != null ?
                new ObjectParameter("file_stream", file_stream) :
                new ObjectParameter("file_stream", typeof(byte[]));
    
            var file_nameParameter = file_name != null ?
                new ObjectParameter("file_name", file_name) :
                new ObjectParameter("file_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("AddDocument", file_stream_idParameter, file_streamParameter, file_nameParameter);
        }
    
        public virtual ObjectResult<string> AddDocumentToComplaint(string caseId, Nullable<long> stageId, Nullable<System.Guid> stream_id, string fileName, string sourceFileName, string sourceIncoming, string description, Nullable<bool> incoming, Nullable<bool> manual, Nullable<System.DateTimeOffset> insertDate, string insertUser)
        {
            var caseIdParameter = caseId != null ?
                new ObjectParameter("CaseId", caseId) :
                new ObjectParameter("CaseId", typeof(string));
    
            var stageIdParameter = stageId.HasValue ?
                new ObjectParameter("StageId", stageId) :
                new ObjectParameter("StageId", typeof(long));
    
            var stream_idParameter = stream_id.HasValue ?
                new ObjectParameter("stream_id", stream_id) :
                new ObjectParameter("stream_id", typeof(System.Guid));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var sourceFileNameParameter = sourceFileName != null ?
                new ObjectParameter("SourceFileName", sourceFileName) :
                new ObjectParameter("SourceFileName", typeof(string));
    
            var sourceIncomingParameter = sourceIncoming != null ?
                new ObjectParameter("SourceIncoming", sourceIncoming) :
                new ObjectParameter("SourceIncoming", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var incomingParameter = incoming.HasValue ?
                new ObjectParameter("Incoming", incoming) :
                new ObjectParameter("Incoming", typeof(bool));
    
            var manualParameter = manual.HasValue ?
                new ObjectParameter("Manual", manual) :
                new ObjectParameter("Manual", typeof(bool));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTimeOffset));
    
            var insertUserParameter = insertUser != null ?
                new ObjectParameter("InsertUser", insertUser) :
                new ObjectParameter("InsertUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AddDocumentToComplaint", caseIdParameter, stageIdParameter, stream_idParameter, fileNameParameter, sourceFileNameParameter, sourceIncomingParameter, descriptionParameter, incomingParameter, manualParameter, insertDateParameter, insertUserParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> AddIncomingFile(Nullable<System.Guid> file_stream_id, byte[] file_stream, string file_name)
        {
            var file_stream_idParameter = file_stream_id.HasValue ?
                new ObjectParameter("file_stream_id", file_stream_id) :
                new ObjectParameter("file_stream_id", typeof(System.Guid));
    
            var file_streamParameter = file_stream != null ?
                new ObjectParameter("file_stream", file_stream) :
                new ObjectParameter("file_stream", typeof(byte[]));
    
            var file_nameParameter = file_name != null ?
                new ObjectParameter("file_name", file_name) :
                new ObjectParameter("file_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("AddIncomingFile", file_stream_idParameter, file_streamParameter, file_nameParameter);
        }
    
        public virtual int AddNewAudit(string caseId, Nullable<long> stageId, Nullable<System.Guid> stream_id, Nullable<System.DateTime> incomingDate, Nullable<System.Guid> processKey, string description, Nullable<int> status, string errorCode, string errorDescription, Nullable<System.DateTimeOffset> insertDate, string insertUser, ObjectParameter auditId)
        {
            var caseIdParameter = caseId != null ?
                new ObjectParameter("CaseId", caseId) :
                new ObjectParameter("CaseId", typeof(string));
    
            var stageIdParameter = stageId.HasValue ?
                new ObjectParameter("StageId", stageId) :
                new ObjectParameter("StageId", typeof(long));
    
            var stream_idParameter = stream_id.HasValue ?
                new ObjectParameter("stream_id", stream_id) :
                new ObjectParameter("stream_id", typeof(System.Guid));
    
            var incomingDateParameter = incomingDate.HasValue ?
                new ObjectParameter("IncomingDate", incomingDate) :
                new ObjectParameter("IncomingDate", typeof(System.DateTime));
    
            var processKeyParameter = processKey.HasValue ?
                new ObjectParameter("ProcessKey", processKey) :
                new ObjectParameter("ProcessKey", typeof(System.Guid));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var errorCodeParameter = errorCode != null ?
                new ObjectParameter("ErrorCode", errorCode) :
                new ObjectParameter("ErrorCode", typeof(string));
    
            var errorDescriptionParameter = errorDescription != null ?
                new ObjectParameter("ErrorDescription", errorDescription) :
                new ObjectParameter("ErrorDescription", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTimeOffset));
    
            var insertUserParameter = insertUser != null ?
                new ObjectParameter("InsertUser", insertUser) :
                new ObjectParameter("InsertUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewAudit", caseIdParameter, stageIdParameter, stream_idParameter, incomingDateParameter, processKeyParameter, descriptionParameter, statusParameter, errorCodeParameter, errorDescriptionParameter, insertDateParameter, insertUserParameter, auditId);
        }
    
        public virtual int AddNewCaseFilingIncomingFile(string caseId, Nullable<long> stageId, Nullable<System.Guid> stream_id, string fileType, string fileName, string fileContent, Nullable<System.Guid> processKey, Nullable<System.DateTimeOffset> insertDate, string insertUser, ObjectParameter incomingId)
        {
            var caseIdParameter = caseId != null ?
                new ObjectParameter("CaseId", caseId) :
                new ObjectParameter("CaseId", typeof(string));
    
            var stageIdParameter = stageId.HasValue ?
                new ObjectParameter("StageId", stageId) :
                new ObjectParameter("StageId", typeof(long));
    
            var stream_idParameter = stream_id.HasValue ?
                new ObjectParameter("stream_id", stream_id) :
                new ObjectParameter("stream_id", typeof(System.Guid));
    
            var fileTypeParameter = fileType != null ?
                new ObjectParameter("FileType", fileType) :
                new ObjectParameter("FileType", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileContentParameter = fileContent != null ?
                new ObjectParameter("FileContent", fileContent) :
                new ObjectParameter("FileContent", typeof(string));
    
            var processKeyParameter = processKey.HasValue ?
                new ObjectParameter("ProcessKey", processKey) :
                new ObjectParameter("ProcessKey", typeof(System.Guid));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTimeOffset));
    
            var insertUserParameter = insertUser != null ?
                new ObjectParameter("InsertUser", insertUser) :
                new ObjectParameter("InsertUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewCaseFilingIncomingFile", caseIdParameter, stageIdParameter, stream_idParameter, fileTypeParameter, fileNameParameter, fileContentParameter, processKeyParameter, insertDateParameter, insertUserParameter, incomingId);
        }
    
        public virtual int AddNewCaseFilingOutgoingFile(string caseId, Nullable<long> stageId, Nullable<System.Guid> stream_id, string fileType, string fileName, string fileContent, Nullable<System.Guid> processKey, Nullable<System.DateTimeOffset> insertDate, string insertUser, ObjectParameter outgoingId)
        {
            var caseIdParameter = caseId != null ?
                new ObjectParameter("CaseId", caseId) :
                new ObjectParameter("CaseId", typeof(string));
    
            var stageIdParameter = stageId.HasValue ?
                new ObjectParameter("StageId", stageId) :
                new ObjectParameter("StageId", typeof(long));
    
            var stream_idParameter = stream_id.HasValue ?
                new ObjectParameter("stream_id", stream_id) :
                new ObjectParameter("stream_id", typeof(System.Guid));
    
            var fileTypeParameter = fileType != null ?
                new ObjectParameter("FileType", fileType) :
                new ObjectParameter("FileType", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileContentParameter = fileContent != null ?
                new ObjectParameter("FileContent", fileContent) :
                new ObjectParameter("FileContent", typeof(string));
    
            var processKeyParameter = processKey.HasValue ?
                new ObjectParameter("ProcessKey", processKey) :
                new ObjectParameter("ProcessKey", typeof(System.Guid));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTimeOffset));
    
            var insertUserParameter = insertUser != null ?
                new ObjectParameter("InsertUser", insertUser) :
                new ObjectParameter("InsertUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewCaseFilingOutgoingFile", caseIdParameter, stageIdParameter, stream_idParameter, fileTypeParameter, fileNameParameter, fileContentParameter, processKeyParameter, insertDateParameter, insertUserParameter, outgoingId);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> AddOutgoingFile(Nullable<System.Guid> file_stream_id, byte[] file_stream, string file_name)
        {
            var file_stream_idParameter = file_stream_id.HasValue ?
                new ObjectParameter("file_stream_id", file_stream_id) :
                new ObjectParameter("file_stream_id", typeof(System.Guid));
    
            var file_streamParameter = file_stream != null ?
                new ObjectParameter("file_stream", file_stream) :
                new ObjectParameter("file_stream", typeof(byte[]));
    
            var file_nameParameter = file_name != null ?
                new ObjectParameter("file_name", file_name) :
                new ObjectParameter("file_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("AddOutgoingFile", file_stream_idParameter, file_streamParameter, file_nameParameter);
        }
    
        public virtual int AddToCRBReportItem(string caseId, Nullable<long> valueId, Nullable<long> recordId, Nullable<long> stageId, Nullable<int> cBReportStatus, Nullable<int> cRBReportId, Nullable<System.DateTimeOffset> insertDate, string insertUser)
        {
            var caseIdParameter = caseId != null ?
                new ObjectParameter("CaseId", caseId) :
                new ObjectParameter("CaseId", typeof(string));
    
            var valueIdParameter = valueId.HasValue ?
                new ObjectParameter("ValueId", valueId) :
                new ObjectParameter("ValueId", typeof(long));
    
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("RecordId", recordId) :
                new ObjectParameter("RecordId", typeof(long));
    
            var stageIdParameter = stageId.HasValue ?
                new ObjectParameter("StageId", stageId) :
                new ObjectParameter("StageId", typeof(long));
    
            var cBReportStatusParameter = cBReportStatus.HasValue ?
                new ObjectParameter("CBReportStatus", cBReportStatus) :
                new ObjectParameter("CBReportStatus", typeof(int));
    
            var cRBReportIdParameter = cRBReportId.HasValue ?
                new ObjectParameter("CRBReportId", cRBReportId) :
                new ObjectParameter("CRBReportId", typeof(int));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTimeOffset));
    
            var insertUserParameter = insertUser != null ?
                new ObjectParameter("InsertUser", insertUser) :
                new ObjectParameter("InsertUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddToCRBReportItem", caseIdParameter, valueIdParameter, recordIdParameter, stageIdParameter, cBReportStatusParameter, cRBReportIdParameter, insertDateParameter, insertUserParameter);
        }
    
        public virtual ObjectResult<GetAudit_Result> GetAudit(Nullable<long> auditId)
        {
            var auditIdParameter = auditId.HasValue ?
                new ObjectParameter("AuditId", auditId) :
                new ObjectParameter("AuditId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAudit_Result>("GetAudit", auditIdParameter);
        }
    
        public virtual ObjectResult<GetCaseFilingIncomingFile_Result> GetCaseFilingIncomingFile(Nullable<long> incomingId)
        {
            var incomingIdParameter = incomingId.HasValue ?
                new ObjectParameter("IncomingId", incomingId) :
                new ObjectParameter("IncomingId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCaseFilingIncomingFile_Result>("GetCaseFilingIncomingFile", incomingIdParameter);
        }
    
        public virtual ObjectResult<GetCaseFilingOutgoingFile_Result> GetCaseFilingOutgoingFile(Nullable<long> outgoingId)
        {
            var outgoingIdParameter = outgoingId.HasValue ?
                new ObjectParameter("OutgoingId", outgoingId) :
                new ObjectParameter("OutgoingId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCaseFilingOutgoingFile_Result>("GetCaseFilingOutgoingFile", outgoingIdParameter);
        }
    
        public virtual int GetCLFReportFile(Nullable<int> cLFReportId, ObjectParameter file_stream)
        {
            var cLFReportIdParameter = cLFReportId.HasValue ?
                new ObjectParameter("CLFReportId", cLFReportId) :
                new ObjectParameter("CLFReportId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCLFReportFile", cLFReportIdParameter, file_stream);
        }
    
        public virtual int GetIncomingFile(Nullable<System.Guid> stream_id, ObjectParameter file_stream)
        {
            var stream_idParameter = stream_id.HasValue ?
                new ObjectParameter("stream_id", stream_id) :
                new ObjectParameter("stream_id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetIncomingFile", stream_idParameter, file_stream);
        }
    
        public virtual int GetOrgIncomingFile(Nullable<int> fileId, ObjectParameter file_stream)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetOrgIncomingFile", fileIdParameter, file_stream);
        }
    
        public virtual int GetOutgoingFile(Nullable<System.Guid> stream_id, ObjectParameter file_stream)
        {
            var stream_idParameter = stream_id.HasValue ?
                new ObjectParameter("stream_id", stream_id) :
                new ObjectParameter("stream_id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetOutgoingFile", stream_idParameter, file_stream);
        }
    
        public virtual int GetRepresentmentPostilionFile(Nullable<long> fileId, ObjectParameter file_stream)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRepresentmentPostilionFile", fileIdParameter, file_stream);
        }
    
        public virtual int GetResponsePostilionFile(Nullable<long> fileId, ObjectParameter file_stream)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetResponsePostilionFile", fileIdParameter, file_stream);
        }
    
        public virtual ObjectResult<Nullable<int>> InsertOrgIncomingFile(string organizationId, string incomingFileID, string fileName)
        {
            var organizationIdParameter = organizationId != null ?
                new ObjectParameter("OrganizationId", organizationId) :
                new ObjectParameter("OrganizationId", typeof(string));
    
            var incomingFileIDParameter = incomingFileID != null ?
                new ObjectParameter("IncomingFileID", incomingFileID) :
                new ObjectParameter("IncomingFileID", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertOrgIncomingFile", organizationIdParameter, incomingFileIDParameter, fileNameParameter);
        }
    
        public virtual int InsertOrgIncomingTranMASTERCARD(string bIN, string aRN, string pAN, string pANExtention, string aCode, string incomingDate, string settlementDate, string transactionDate, string processingDate, string functionCode, string reasonCode, string mCC, string mTI, string messageReversalIndicator, string retrievalReferenceNumber, string pOSID, string originalTransactionAmount, string originalTransactionReconciliation, string bookingAmountSign, string bookingAmount, string bookingAmountExponent, string bookingCurrencyCode, string stageAmountSign, string stageAmount, string stageAmountExponent, string stageCurrencyCode, string merchantNameCity, string merchantCapability, string cardAcceptorCountryCode, string memberMessageText, string kKOCbReference, string mRI, string partialFlag, string processingCode, string serviceCode, string currencyExponents, string currencyCodesAmountsOriginal, string brand, string narritive, string transactionAmountSign, string transactionAmount, string transactionAmountExponent, string transactionCurrencyCode, string stage, string stageDate, string cVVFlag, string cVCFlag, string eCommerce, string mPILogFlag, string dataRecord, string dateAction, string eCSLI, string terminalType, string inputMode, string issuerCountryCode, string cardAcceptorIdCode, string messageType, Nullable<System.DateTimeOffset> transactionDateTimeLocal, string giccMCC, string giccDomesticMCC, string pOSEntryMode, string documentationIndicator, string posTerminalType, string posCardDataImputMode, string posCardPresent, string posCardholderPresent, string posCardholderAuthMethod, string expiryDate, string giccRevDate, string settleAmountImpact, string tranAmountReq, string postTranId, string prevPostTranId, string tranLifeCycleID, string iRD, string assignedID, string fraudNotificationDate, string posCardholderAuthEntity, string posCardDataOutputAbility, string systemTraceAuditNr, string datetimeTranLocal, string merchantType, string cardSeqNr, string posConditionCode, string retrievalReferenceNr, string authIDRsp, string rspCodeRsp, string serviceRestrictionCode, string terminalID, string cardAcceptorNameLoc, string posCardDataInputAbility, string posCardholderAuthAbility, string posCardCaptureAbility, string posOperatingEnvironment, string posTerminalOutputAbility, string posPinCaptureAbility, string posTerminalOperator, string ucafData, string tranAmountRsp, string tranType, Nullable<System.DateTime> businessDate, Nullable<int> fileId, string sourceCountryCode, string prevMessageType, string prevUcafData, string structuredDataReq, Nullable<System.DateTime> dateTimeRsp, string transactionDestinationInstitutionIDCode, Nullable<int> processingMode, string participantId)
        {
            var bINParameter = bIN != null ?
                new ObjectParameter("BIN", bIN) :
                new ObjectParameter("BIN", typeof(string));
    
            var aRNParameter = aRN != null ?
                new ObjectParameter("ARN", aRN) :
                new ObjectParameter("ARN", typeof(string));
    
            var pANParameter = pAN != null ?
                new ObjectParameter("PAN", pAN) :
                new ObjectParameter("PAN", typeof(string));
    
            var pANExtentionParameter = pANExtention != null ?
                new ObjectParameter("PANExtention", pANExtention) :
                new ObjectParameter("PANExtention", typeof(string));
    
            var aCodeParameter = aCode != null ?
                new ObjectParameter("ACode", aCode) :
                new ObjectParameter("ACode", typeof(string));
    
            var incomingDateParameter = incomingDate != null ?
                new ObjectParameter("IncomingDate", incomingDate) :
                new ObjectParameter("IncomingDate", typeof(string));
    
            var settlementDateParameter = settlementDate != null ?
                new ObjectParameter("SettlementDate", settlementDate) :
                new ObjectParameter("SettlementDate", typeof(string));
    
            var transactionDateParameter = transactionDate != null ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(string));
    
            var processingDateParameter = processingDate != null ?
                new ObjectParameter("ProcessingDate", processingDate) :
                new ObjectParameter("ProcessingDate", typeof(string));
    
            var functionCodeParameter = functionCode != null ?
                new ObjectParameter("FunctionCode", functionCode) :
                new ObjectParameter("FunctionCode", typeof(string));
    
            var reasonCodeParameter = reasonCode != null ?
                new ObjectParameter("ReasonCode", reasonCode) :
                new ObjectParameter("ReasonCode", typeof(string));
    
            var mCCParameter = mCC != null ?
                new ObjectParameter("MCC", mCC) :
                new ObjectParameter("MCC", typeof(string));
    
            var mTIParameter = mTI != null ?
                new ObjectParameter("MTI", mTI) :
                new ObjectParameter("MTI", typeof(string));
    
            var messageReversalIndicatorParameter = messageReversalIndicator != null ?
                new ObjectParameter("MessageReversalIndicator", messageReversalIndicator) :
                new ObjectParameter("MessageReversalIndicator", typeof(string));
    
            var retrievalReferenceNumberParameter = retrievalReferenceNumber != null ?
                new ObjectParameter("RetrievalReferenceNumber", retrievalReferenceNumber) :
                new ObjectParameter("RetrievalReferenceNumber", typeof(string));
    
            var pOSIDParameter = pOSID != null ?
                new ObjectParameter("POSID", pOSID) :
                new ObjectParameter("POSID", typeof(string));
    
            var originalTransactionAmountParameter = originalTransactionAmount != null ?
                new ObjectParameter("OriginalTransactionAmount", originalTransactionAmount) :
                new ObjectParameter("OriginalTransactionAmount", typeof(string));
    
            var originalTransactionReconciliationParameter = originalTransactionReconciliation != null ?
                new ObjectParameter("OriginalTransactionReconciliation", originalTransactionReconciliation) :
                new ObjectParameter("OriginalTransactionReconciliation", typeof(string));
    
            var bookingAmountSignParameter = bookingAmountSign != null ?
                new ObjectParameter("BookingAmountSign", bookingAmountSign) :
                new ObjectParameter("BookingAmountSign", typeof(string));
    
            var bookingAmountParameter = bookingAmount != null ?
                new ObjectParameter("BookingAmount", bookingAmount) :
                new ObjectParameter("BookingAmount", typeof(string));
    
            var bookingAmountExponentParameter = bookingAmountExponent != null ?
                new ObjectParameter("BookingAmountExponent", bookingAmountExponent) :
                new ObjectParameter("BookingAmountExponent", typeof(string));
    
            var bookingCurrencyCodeParameter = bookingCurrencyCode != null ?
                new ObjectParameter("BookingCurrencyCode", bookingCurrencyCode) :
                new ObjectParameter("BookingCurrencyCode", typeof(string));
    
            var stageAmountSignParameter = stageAmountSign != null ?
                new ObjectParameter("StageAmountSign", stageAmountSign) :
                new ObjectParameter("StageAmountSign", typeof(string));
    
            var stageAmountParameter = stageAmount != null ?
                new ObjectParameter("StageAmount", stageAmount) :
                new ObjectParameter("StageAmount", typeof(string));
    
            var stageAmountExponentParameter = stageAmountExponent != null ?
                new ObjectParameter("StageAmountExponent", stageAmountExponent) :
                new ObjectParameter("StageAmountExponent", typeof(string));
    
            var stageCurrencyCodeParameter = stageCurrencyCode != null ?
                new ObjectParameter("StageCurrencyCode", stageCurrencyCode) :
                new ObjectParameter("StageCurrencyCode", typeof(string));
    
            var merchantNameCityParameter = merchantNameCity != null ?
                new ObjectParameter("MerchantNameCity", merchantNameCity) :
                new ObjectParameter("MerchantNameCity", typeof(string));
    
            var merchantCapabilityParameter = merchantCapability != null ?
                new ObjectParameter("MerchantCapability", merchantCapability) :
                new ObjectParameter("MerchantCapability", typeof(string));
    
            var cardAcceptorCountryCodeParameter = cardAcceptorCountryCode != null ?
                new ObjectParameter("CardAcceptorCountryCode", cardAcceptorCountryCode) :
                new ObjectParameter("CardAcceptorCountryCode", typeof(string));
    
            var memberMessageTextParameter = memberMessageText != null ?
                new ObjectParameter("MemberMessageText", memberMessageText) :
                new ObjectParameter("MemberMessageText", typeof(string));
    
            var kKOCbReferenceParameter = kKOCbReference != null ?
                new ObjectParameter("KKOCbReference", kKOCbReference) :
                new ObjectParameter("KKOCbReference", typeof(string));
    
            var mRIParameter = mRI != null ?
                new ObjectParameter("MRI", mRI) :
                new ObjectParameter("MRI", typeof(string));
    
            var partialFlagParameter = partialFlag != null ?
                new ObjectParameter("PartialFlag", partialFlag) :
                new ObjectParameter("PartialFlag", typeof(string));
    
            var processingCodeParameter = processingCode != null ?
                new ObjectParameter("ProcessingCode", processingCode) :
                new ObjectParameter("ProcessingCode", typeof(string));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var currencyExponentsParameter = currencyExponents != null ?
                new ObjectParameter("CurrencyExponents", currencyExponents) :
                new ObjectParameter("CurrencyExponents", typeof(string));
    
            var currencyCodesAmountsOriginalParameter = currencyCodesAmountsOriginal != null ?
                new ObjectParameter("CurrencyCodesAmountsOriginal", currencyCodesAmountsOriginal) :
                new ObjectParameter("CurrencyCodesAmountsOriginal", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var narritiveParameter = narritive != null ?
                new ObjectParameter("Narritive", narritive) :
                new ObjectParameter("Narritive", typeof(string));
    
            var transactionAmountSignParameter = transactionAmountSign != null ?
                new ObjectParameter("TransactionAmountSign", transactionAmountSign) :
                new ObjectParameter("TransactionAmountSign", typeof(string));
    
            var transactionAmountParameter = transactionAmount != null ?
                new ObjectParameter("TransactionAmount", transactionAmount) :
                new ObjectParameter("TransactionAmount", typeof(string));
    
            var transactionAmountExponentParameter = transactionAmountExponent != null ?
                new ObjectParameter("TransactionAmountExponent", transactionAmountExponent) :
                new ObjectParameter("TransactionAmountExponent", typeof(string));
    
            var transactionCurrencyCodeParameter = transactionCurrencyCode != null ?
                new ObjectParameter("TransactionCurrencyCode", transactionCurrencyCode) :
                new ObjectParameter("TransactionCurrencyCode", typeof(string));
    
            var stageParameter = stage != null ?
                new ObjectParameter("Stage", stage) :
                new ObjectParameter("Stage", typeof(string));
    
            var stageDateParameter = stageDate != null ?
                new ObjectParameter("StageDate", stageDate) :
                new ObjectParameter("StageDate", typeof(string));
    
            var cVVFlagParameter = cVVFlag != null ?
                new ObjectParameter("CVVFlag", cVVFlag) :
                new ObjectParameter("CVVFlag", typeof(string));
    
            var cVCFlagParameter = cVCFlag != null ?
                new ObjectParameter("CVCFlag", cVCFlag) :
                new ObjectParameter("CVCFlag", typeof(string));
    
            var eCommerceParameter = eCommerce != null ?
                new ObjectParameter("ECommerce", eCommerce) :
                new ObjectParameter("ECommerce", typeof(string));
    
            var mPILogFlagParameter = mPILogFlag != null ?
                new ObjectParameter("MPILogFlag", mPILogFlag) :
                new ObjectParameter("MPILogFlag", typeof(string));
    
            var dataRecordParameter = dataRecord != null ?
                new ObjectParameter("DataRecord", dataRecord) :
                new ObjectParameter("DataRecord", typeof(string));
    
            var dateActionParameter = dateAction != null ?
                new ObjectParameter("DateAction", dateAction) :
                new ObjectParameter("DateAction", typeof(string));
    
            var eCSLIParameter = eCSLI != null ?
                new ObjectParameter("ECSLI", eCSLI) :
                new ObjectParameter("ECSLI", typeof(string));
    
            var terminalTypeParameter = terminalType != null ?
                new ObjectParameter("TerminalType", terminalType) :
                new ObjectParameter("TerminalType", typeof(string));
    
            var inputModeParameter = inputMode != null ?
                new ObjectParameter("InputMode", inputMode) :
                new ObjectParameter("InputMode", typeof(string));
    
            var issuerCountryCodeParameter = issuerCountryCode != null ?
                new ObjectParameter("IssuerCountryCode", issuerCountryCode) :
                new ObjectParameter("IssuerCountryCode", typeof(string));
    
            var cardAcceptorIdCodeParameter = cardAcceptorIdCode != null ?
                new ObjectParameter("CardAcceptorIdCode", cardAcceptorIdCode) :
                new ObjectParameter("CardAcceptorIdCode", typeof(string));
    
            var messageTypeParameter = messageType != null ?
                new ObjectParameter("MessageType", messageType) :
                new ObjectParameter("MessageType", typeof(string));
    
            var transactionDateTimeLocalParameter = transactionDateTimeLocal.HasValue ?
                new ObjectParameter("TransactionDateTimeLocal", transactionDateTimeLocal) :
                new ObjectParameter("TransactionDateTimeLocal", typeof(System.DateTimeOffset));
    
            var giccMCCParameter = giccMCC != null ?
                new ObjectParameter("GiccMCC", giccMCC) :
                new ObjectParameter("GiccMCC", typeof(string));
    
            var giccDomesticMCCParameter = giccDomesticMCC != null ?
                new ObjectParameter("GiccDomesticMCC", giccDomesticMCC) :
                new ObjectParameter("GiccDomesticMCC", typeof(string));
    
            var pOSEntryModeParameter = pOSEntryMode != null ?
                new ObjectParameter("POSEntryMode", pOSEntryMode) :
                new ObjectParameter("POSEntryMode", typeof(string));
    
            var documentationIndicatorParameter = documentationIndicator != null ?
                new ObjectParameter("DocumentationIndicator", documentationIndicator) :
                new ObjectParameter("DocumentationIndicator", typeof(string));
    
            var posTerminalTypeParameter = posTerminalType != null ?
                new ObjectParameter("PosTerminalType", posTerminalType) :
                new ObjectParameter("PosTerminalType", typeof(string));
    
            var posCardDataImputModeParameter = posCardDataImputMode != null ?
                new ObjectParameter("PosCardDataImputMode", posCardDataImputMode) :
                new ObjectParameter("PosCardDataImputMode", typeof(string));
    
            var posCardPresentParameter = posCardPresent != null ?
                new ObjectParameter("PosCardPresent", posCardPresent) :
                new ObjectParameter("PosCardPresent", typeof(string));
    
            var posCardholderPresentParameter = posCardholderPresent != null ?
                new ObjectParameter("PosCardholderPresent", posCardholderPresent) :
                new ObjectParameter("PosCardholderPresent", typeof(string));
    
            var posCardholderAuthMethodParameter = posCardholderAuthMethod != null ?
                new ObjectParameter("PosCardholderAuthMethod", posCardholderAuthMethod) :
                new ObjectParameter("PosCardholderAuthMethod", typeof(string));
    
            var expiryDateParameter = expiryDate != null ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(string));
    
            var giccRevDateParameter = giccRevDate != null ?
                new ObjectParameter("GiccRevDate", giccRevDate) :
                new ObjectParameter("GiccRevDate", typeof(string));
    
            var settleAmountImpactParameter = settleAmountImpact != null ?
                new ObjectParameter("SettleAmountImpact", settleAmountImpact) :
                new ObjectParameter("SettleAmountImpact", typeof(string));
    
            var tranAmountReqParameter = tranAmountReq != null ?
                new ObjectParameter("TranAmountReq", tranAmountReq) :
                new ObjectParameter("TranAmountReq", typeof(string));
    
            var postTranIdParameter = postTranId != null ?
                new ObjectParameter("PostTranId", postTranId) :
                new ObjectParameter("PostTranId", typeof(string));
    
            var prevPostTranIdParameter = prevPostTranId != null ?
                new ObjectParameter("PrevPostTranId", prevPostTranId) :
                new ObjectParameter("PrevPostTranId", typeof(string));
    
            var tranLifeCycleIDParameter = tranLifeCycleID != null ?
                new ObjectParameter("TranLifeCycleID", tranLifeCycleID) :
                new ObjectParameter("TranLifeCycleID", typeof(string));
    
            var iRDParameter = iRD != null ?
                new ObjectParameter("IRD", iRD) :
                new ObjectParameter("IRD", typeof(string));
    
            var assignedIDParameter = assignedID != null ?
                new ObjectParameter("AssignedID", assignedID) :
                new ObjectParameter("AssignedID", typeof(string));
    
            var fraudNotificationDateParameter = fraudNotificationDate != null ?
                new ObjectParameter("FraudNotificationDate", fraudNotificationDate) :
                new ObjectParameter("FraudNotificationDate", typeof(string));
    
            var posCardholderAuthEntityParameter = posCardholderAuthEntity != null ?
                new ObjectParameter("PosCardholderAuthEntity", posCardholderAuthEntity) :
                new ObjectParameter("PosCardholderAuthEntity", typeof(string));
    
            var posCardDataOutputAbilityParameter = posCardDataOutputAbility != null ?
                new ObjectParameter("PosCardDataOutputAbility", posCardDataOutputAbility) :
                new ObjectParameter("PosCardDataOutputAbility", typeof(string));
    
            var systemTraceAuditNrParameter = systemTraceAuditNr != null ?
                new ObjectParameter("SystemTraceAuditNr", systemTraceAuditNr) :
                new ObjectParameter("SystemTraceAuditNr", typeof(string));
    
            var datetimeTranLocalParameter = datetimeTranLocal != null ?
                new ObjectParameter("DatetimeTranLocal", datetimeTranLocal) :
                new ObjectParameter("DatetimeTranLocal", typeof(string));
    
            var merchantTypeParameter = merchantType != null ?
                new ObjectParameter("MerchantType", merchantType) :
                new ObjectParameter("MerchantType", typeof(string));
    
            var cardSeqNrParameter = cardSeqNr != null ?
                new ObjectParameter("CardSeqNr", cardSeqNr) :
                new ObjectParameter("CardSeqNr", typeof(string));
    
            var posConditionCodeParameter = posConditionCode != null ?
                new ObjectParameter("PosConditionCode", posConditionCode) :
                new ObjectParameter("PosConditionCode", typeof(string));
    
            var retrievalReferenceNrParameter = retrievalReferenceNr != null ?
                new ObjectParameter("RetrievalReferenceNr", retrievalReferenceNr) :
                new ObjectParameter("RetrievalReferenceNr", typeof(string));
    
            var authIDRspParameter = authIDRsp != null ?
                new ObjectParameter("AuthIDRsp", authIDRsp) :
                new ObjectParameter("AuthIDRsp", typeof(string));
    
            var rspCodeRspParameter = rspCodeRsp != null ?
                new ObjectParameter("RspCodeRsp", rspCodeRsp) :
                new ObjectParameter("RspCodeRsp", typeof(string));
    
            var serviceRestrictionCodeParameter = serviceRestrictionCode != null ?
                new ObjectParameter("ServiceRestrictionCode", serviceRestrictionCode) :
                new ObjectParameter("ServiceRestrictionCode", typeof(string));
    
            var terminalIDParameter = terminalID != null ?
                new ObjectParameter("TerminalID", terminalID) :
                new ObjectParameter("TerminalID", typeof(string));
    
            var cardAcceptorNameLocParameter = cardAcceptorNameLoc != null ?
                new ObjectParameter("CardAcceptorNameLoc", cardAcceptorNameLoc) :
                new ObjectParameter("CardAcceptorNameLoc", typeof(string));
    
            var posCardDataInputAbilityParameter = posCardDataInputAbility != null ?
                new ObjectParameter("PosCardDataInputAbility", posCardDataInputAbility) :
                new ObjectParameter("PosCardDataInputAbility", typeof(string));
    
            var posCardholderAuthAbilityParameter = posCardholderAuthAbility != null ?
                new ObjectParameter("PosCardholderAuthAbility", posCardholderAuthAbility) :
                new ObjectParameter("PosCardholderAuthAbility", typeof(string));
    
            var posCardCaptureAbilityParameter = posCardCaptureAbility != null ?
                new ObjectParameter("PosCardCaptureAbility", posCardCaptureAbility) :
                new ObjectParameter("PosCardCaptureAbility", typeof(string));
    
            var posOperatingEnvironmentParameter = posOperatingEnvironment != null ?
                new ObjectParameter("PosOperatingEnvironment", posOperatingEnvironment) :
                new ObjectParameter("PosOperatingEnvironment", typeof(string));
    
            var posTerminalOutputAbilityParameter = posTerminalOutputAbility != null ?
                new ObjectParameter("PosTerminalOutputAbility", posTerminalOutputAbility) :
                new ObjectParameter("PosTerminalOutputAbility", typeof(string));
    
            var posPinCaptureAbilityParameter = posPinCaptureAbility != null ?
                new ObjectParameter("PosPinCaptureAbility", posPinCaptureAbility) :
                new ObjectParameter("PosPinCaptureAbility", typeof(string));
    
            var posTerminalOperatorParameter = posTerminalOperator != null ?
                new ObjectParameter("PosTerminalOperator", posTerminalOperator) :
                new ObjectParameter("PosTerminalOperator", typeof(string));
    
            var ucafDataParameter = ucafData != null ?
                new ObjectParameter("UcafData", ucafData) :
                new ObjectParameter("UcafData", typeof(string));
    
            var tranAmountRspParameter = tranAmountRsp != null ?
                new ObjectParameter("TranAmountRsp", tranAmountRsp) :
                new ObjectParameter("TranAmountRsp", typeof(string));
    
            var tranTypeParameter = tranType != null ?
                new ObjectParameter("TranType", tranType) :
                new ObjectParameter("TranType", typeof(string));
    
            var businessDateParameter = businessDate.HasValue ?
                new ObjectParameter("BusinessDate", businessDate) :
                new ObjectParameter("BusinessDate", typeof(System.DateTime));
    
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var sourceCountryCodeParameter = sourceCountryCode != null ?
                new ObjectParameter("SourceCountryCode", sourceCountryCode) :
                new ObjectParameter("SourceCountryCode", typeof(string));
    
            var prevMessageTypeParameter = prevMessageType != null ?
                new ObjectParameter("PrevMessageType", prevMessageType) :
                new ObjectParameter("PrevMessageType", typeof(string));
    
            var prevUcafDataParameter = prevUcafData != null ?
                new ObjectParameter("PrevUcafData", prevUcafData) :
                new ObjectParameter("PrevUcafData", typeof(string));
    
            var structuredDataReqParameter = structuredDataReq != null ?
                new ObjectParameter("StructuredDataReq", structuredDataReq) :
                new ObjectParameter("StructuredDataReq", typeof(string));
    
            var dateTimeRspParameter = dateTimeRsp.HasValue ?
                new ObjectParameter("DateTimeRsp", dateTimeRsp) :
                new ObjectParameter("DateTimeRsp", typeof(System.DateTime));
    
            var transactionDestinationInstitutionIDCodeParameter = transactionDestinationInstitutionIDCode != null ?
                new ObjectParameter("TransactionDestinationInstitutionIDCode", transactionDestinationInstitutionIDCode) :
                new ObjectParameter("TransactionDestinationInstitutionIDCode", typeof(string));
    
            var processingModeParameter = processingMode.HasValue ?
                new ObjectParameter("ProcessingMode", processingMode) :
                new ObjectParameter("ProcessingMode", typeof(int));
    
            var participantIdParameter = participantId != null ?
                new ObjectParameter("ParticipantId", participantId) :
                new ObjectParameter("ParticipantId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrgIncomingTranMASTERCARD", bINParameter, aRNParameter, pANParameter, pANExtentionParameter, aCodeParameter, incomingDateParameter, settlementDateParameter, transactionDateParameter, processingDateParameter, functionCodeParameter, reasonCodeParameter, mCCParameter, mTIParameter, messageReversalIndicatorParameter, retrievalReferenceNumberParameter, pOSIDParameter, originalTransactionAmountParameter, originalTransactionReconciliationParameter, bookingAmountSignParameter, bookingAmountParameter, bookingAmountExponentParameter, bookingCurrencyCodeParameter, stageAmountSignParameter, stageAmountParameter, stageAmountExponentParameter, stageCurrencyCodeParameter, merchantNameCityParameter, merchantCapabilityParameter, cardAcceptorCountryCodeParameter, memberMessageTextParameter, kKOCbReferenceParameter, mRIParameter, partialFlagParameter, processingCodeParameter, serviceCodeParameter, currencyExponentsParameter, currencyCodesAmountsOriginalParameter, brandParameter, narritiveParameter, transactionAmountSignParameter, transactionAmountParameter, transactionAmountExponentParameter, transactionCurrencyCodeParameter, stageParameter, stageDateParameter, cVVFlagParameter, cVCFlagParameter, eCommerceParameter, mPILogFlagParameter, dataRecordParameter, dateActionParameter, eCSLIParameter, terminalTypeParameter, inputModeParameter, issuerCountryCodeParameter, cardAcceptorIdCodeParameter, messageTypeParameter, transactionDateTimeLocalParameter, giccMCCParameter, giccDomesticMCCParameter, pOSEntryModeParameter, documentationIndicatorParameter, posTerminalTypeParameter, posCardDataImputModeParameter, posCardPresentParameter, posCardholderPresentParameter, posCardholderAuthMethodParameter, expiryDateParameter, giccRevDateParameter, settleAmountImpactParameter, tranAmountReqParameter, postTranIdParameter, prevPostTranIdParameter, tranLifeCycleIDParameter, iRDParameter, assignedIDParameter, fraudNotificationDateParameter, posCardholderAuthEntityParameter, posCardDataOutputAbilityParameter, systemTraceAuditNrParameter, datetimeTranLocalParameter, merchantTypeParameter, cardSeqNrParameter, posConditionCodeParameter, retrievalReferenceNrParameter, authIDRspParameter, rspCodeRspParameter, serviceRestrictionCodeParameter, terminalIDParameter, cardAcceptorNameLocParameter, posCardDataInputAbilityParameter, posCardholderAuthAbilityParameter, posCardCaptureAbilityParameter, posOperatingEnvironmentParameter, posTerminalOutputAbilityParameter, posPinCaptureAbilityParameter, posTerminalOperatorParameter, ucafDataParameter, tranAmountRspParameter, tranTypeParameter, businessDateParameter, fileIdParameter, sourceCountryCodeParameter, prevMessageTypeParameter, prevUcafDataParameter, structuredDataReqParameter, dateTimeRspParameter, transactionDestinationInstitutionIDCodeParameter, processingModeParameter, participantIdParameter);
        }
    
        public virtual int InsertOrgIncomingTranVISA(string bIN, string aRN, string pAN, string pANExtention, string aCode, string incomingDate, string settlementDate, string transactionCode, string transactionDate, string originalTransactionAmount, string originalTransactionCurrencyCode, string bookingAmountSign, string bookingAmount, string bookingAmountExponent, string bookingCurrencyCode, string stageAmountSign, string stageAmount, string stageAmountExponent, string stageCurrencyCode, string merchantName, string merchantCity, string merchantCountryCode, string mCC, string usageCode, string rId, string centralProcessingDate, string transactionId, string kKOCbReference, string tID, string mOTOECI, string destinationBin, string sourceBin, string reasonCode, string memberMessageText, string messageText, string partialFlag, string returnReasonCode1, string returnReasonCode2, string returnReasonCode3, string returnReasonCode4, string returnReasonCode5, string brand, string narritive, string transactionAmountSign, string transactionAmount, string transactionAmountExponent, string transactionCurrencyCode, string stage, string stageDate, string cVVFlag, string cVCFlag, string eCommerce, string mPILogFlag, string cardAcceptorIdCode, string messageType, string transactionDateTimeLocal, string giccMCC, string giccDomesticMCC, string pOSEntryMode, string documentationIndicator, string posTerminalType, string posCardDataImputMode, string posCardPresent, string posCardholderPresent, string posCardholderAuthMethod, string expiryDate, string giccRevDate, string settleAmountImpact, string tranAmountReq, string postTranId, string prevPostTranId, string multiClearingSeqNr, string multiClearingSeqCnt, string authSourceCode, string aVSRspCode, string marketSpecAuth, string authRspCode, string posCardholderAuthEntity, string posCardDataOutputAbility, string systemTraceAuditNr, string datetimeTranLocal, string merchantType, string cardSeqNr, string posConditionCode, string retrievalReferenceNr, string authIDRsp, string rspCodeRsp, string serviceRestrictionCode, string terminalID, string cardAcceptorNameLoc, string posCardDataInputAbility, string posCardholderAuthAbility, string posCardCaptureAbility, string posOperatingEnvironment, string posTerminalOutputAbility, string posPinCaptureAbility, string posTerminalOperator, string ucafData, string tranAmountRsp, string tranType, Nullable<System.DateTime> businessDate, Nullable<int> fileId, string sourceCountryCode, string prevMessageType, string prevUcafData, string structuredDataReq, Nullable<System.DateTime> dateTimeRsp, Nullable<int> processingMode, string participantId)
        {
            var bINParameter = bIN != null ?
                new ObjectParameter("BIN", bIN) :
                new ObjectParameter("BIN", typeof(string));
    
            var aRNParameter = aRN != null ?
                new ObjectParameter("ARN", aRN) :
                new ObjectParameter("ARN", typeof(string));
    
            var pANParameter = pAN != null ?
                new ObjectParameter("PAN", pAN) :
                new ObjectParameter("PAN", typeof(string));
    
            var pANExtentionParameter = pANExtention != null ?
                new ObjectParameter("PANExtention", pANExtention) :
                new ObjectParameter("PANExtention", typeof(string));
    
            var aCodeParameter = aCode != null ?
                new ObjectParameter("ACode", aCode) :
                new ObjectParameter("ACode", typeof(string));
    
            var incomingDateParameter = incomingDate != null ?
                new ObjectParameter("IncomingDate", incomingDate) :
                new ObjectParameter("IncomingDate", typeof(string));
    
            var settlementDateParameter = settlementDate != null ?
                new ObjectParameter("SettlementDate", settlementDate) :
                new ObjectParameter("SettlementDate", typeof(string));
    
            var transactionCodeParameter = transactionCode != null ?
                new ObjectParameter("TransactionCode", transactionCode) :
                new ObjectParameter("TransactionCode", typeof(string));
    
            var transactionDateParameter = transactionDate != null ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(string));
    
            var originalTransactionAmountParameter = originalTransactionAmount != null ?
                new ObjectParameter("OriginalTransactionAmount", originalTransactionAmount) :
                new ObjectParameter("OriginalTransactionAmount", typeof(string));
    
            var originalTransactionCurrencyCodeParameter = originalTransactionCurrencyCode != null ?
                new ObjectParameter("OriginalTransactionCurrencyCode", originalTransactionCurrencyCode) :
                new ObjectParameter("OriginalTransactionCurrencyCode", typeof(string));
    
            var bookingAmountSignParameter = bookingAmountSign != null ?
                new ObjectParameter("BookingAmountSign", bookingAmountSign) :
                new ObjectParameter("BookingAmountSign", typeof(string));
    
            var bookingAmountParameter = bookingAmount != null ?
                new ObjectParameter("BookingAmount", bookingAmount) :
                new ObjectParameter("BookingAmount", typeof(string));
    
            var bookingAmountExponentParameter = bookingAmountExponent != null ?
                new ObjectParameter("BookingAmountExponent", bookingAmountExponent) :
                new ObjectParameter("BookingAmountExponent", typeof(string));
    
            var bookingCurrencyCodeParameter = bookingCurrencyCode != null ?
                new ObjectParameter("BookingCurrencyCode", bookingCurrencyCode) :
                new ObjectParameter("BookingCurrencyCode", typeof(string));
    
            var stageAmountSignParameter = stageAmountSign != null ?
                new ObjectParameter("StageAmountSign", stageAmountSign) :
                new ObjectParameter("StageAmountSign", typeof(string));
    
            var stageAmountParameter = stageAmount != null ?
                new ObjectParameter("StageAmount", stageAmount) :
                new ObjectParameter("StageAmount", typeof(string));
    
            var stageAmountExponentParameter = stageAmountExponent != null ?
                new ObjectParameter("StageAmountExponent", stageAmountExponent) :
                new ObjectParameter("StageAmountExponent", typeof(string));
    
            var stageCurrencyCodeParameter = stageCurrencyCode != null ?
                new ObjectParameter("StageCurrencyCode", stageCurrencyCode) :
                new ObjectParameter("StageCurrencyCode", typeof(string));
    
            var merchantNameParameter = merchantName != null ?
                new ObjectParameter("MerchantName", merchantName) :
                new ObjectParameter("MerchantName", typeof(string));
    
            var merchantCityParameter = merchantCity != null ?
                new ObjectParameter("MerchantCity", merchantCity) :
                new ObjectParameter("MerchantCity", typeof(string));
    
            var merchantCountryCodeParameter = merchantCountryCode != null ?
                new ObjectParameter("MerchantCountryCode", merchantCountryCode) :
                new ObjectParameter("MerchantCountryCode", typeof(string));
    
            var mCCParameter = mCC != null ?
                new ObjectParameter("MCC", mCC) :
                new ObjectParameter("MCC", typeof(string));
    
            var usageCodeParameter = usageCode != null ?
                new ObjectParameter("UsageCode", usageCode) :
                new ObjectParameter("UsageCode", typeof(string));
    
            var rIdParameter = rId != null ?
                new ObjectParameter("RId", rId) :
                new ObjectParameter("RId", typeof(string));
    
            var centralProcessingDateParameter = centralProcessingDate != null ?
                new ObjectParameter("CentralProcessingDate", centralProcessingDate) :
                new ObjectParameter("CentralProcessingDate", typeof(string));
    
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var kKOCbReferenceParameter = kKOCbReference != null ?
                new ObjectParameter("KKOCbReference", kKOCbReference) :
                new ObjectParameter("KKOCbReference", typeof(string));
    
            var tIDParameter = tID != null ?
                new ObjectParameter("TID", tID) :
                new ObjectParameter("TID", typeof(string));
    
            var mOTOECIParameter = mOTOECI != null ?
                new ObjectParameter("MOTOECI", mOTOECI) :
                new ObjectParameter("MOTOECI", typeof(string));
    
            var destinationBinParameter = destinationBin != null ?
                new ObjectParameter("DestinationBin", destinationBin) :
                new ObjectParameter("DestinationBin", typeof(string));
    
            var sourceBinParameter = sourceBin != null ?
                new ObjectParameter("SourceBin", sourceBin) :
                new ObjectParameter("SourceBin", typeof(string));
    
            var reasonCodeParameter = reasonCode != null ?
                new ObjectParameter("ReasonCode", reasonCode) :
                new ObjectParameter("ReasonCode", typeof(string));
    
            var memberMessageTextParameter = memberMessageText != null ?
                new ObjectParameter("MemberMessageText", memberMessageText) :
                new ObjectParameter("MemberMessageText", typeof(string));
    
            var messageTextParameter = messageText != null ?
                new ObjectParameter("MessageText", messageText) :
                new ObjectParameter("MessageText", typeof(string));
    
            var partialFlagParameter = partialFlag != null ?
                new ObjectParameter("PartialFlag", partialFlag) :
                new ObjectParameter("PartialFlag", typeof(string));
    
            var returnReasonCode1Parameter = returnReasonCode1 != null ?
                new ObjectParameter("ReturnReasonCode1", returnReasonCode1) :
                new ObjectParameter("ReturnReasonCode1", typeof(string));
    
            var returnReasonCode2Parameter = returnReasonCode2 != null ?
                new ObjectParameter("ReturnReasonCode2", returnReasonCode2) :
                new ObjectParameter("ReturnReasonCode2", typeof(string));
    
            var returnReasonCode3Parameter = returnReasonCode3 != null ?
                new ObjectParameter("ReturnReasonCode3", returnReasonCode3) :
                new ObjectParameter("ReturnReasonCode3", typeof(string));
    
            var returnReasonCode4Parameter = returnReasonCode4 != null ?
                new ObjectParameter("ReturnReasonCode4", returnReasonCode4) :
                new ObjectParameter("ReturnReasonCode4", typeof(string));
    
            var returnReasonCode5Parameter = returnReasonCode5 != null ?
                new ObjectParameter("ReturnReasonCode5", returnReasonCode5) :
                new ObjectParameter("ReturnReasonCode5", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var narritiveParameter = narritive != null ?
                new ObjectParameter("Narritive", narritive) :
                new ObjectParameter("Narritive", typeof(string));
    
            var transactionAmountSignParameter = transactionAmountSign != null ?
                new ObjectParameter("TransactionAmountSign", transactionAmountSign) :
                new ObjectParameter("TransactionAmountSign", typeof(string));
    
            var transactionAmountParameter = transactionAmount != null ?
                new ObjectParameter("TransactionAmount", transactionAmount) :
                new ObjectParameter("TransactionAmount", typeof(string));
    
            var transactionAmountExponentParameter = transactionAmountExponent != null ?
                new ObjectParameter("TransactionAmountExponent", transactionAmountExponent) :
                new ObjectParameter("TransactionAmountExponent", typeof(string));
    
            var transactionCurrencyCodeParameter = transactionCurrencyCode != null ?
                new ObjectParameter("TransactionCurrencyCode", transactionCurrencyCode) :
                new ObjectParameter("TransactionCurrencyCode", typeof(string));
    
            var stageParameter = stage != null ?
                new ObjectParameter("Stage", stage) :
                new ObjectParameter("Stage", typeof(string));
    
            var stageDateParameter = stageDate != null ?
                new ObjectParameter("StageDate", stageDate) :
                new ObjectParameter("StageDate", typeof(string));
    
            var cVVFlagParameter = cVVFlag != null ?
                new ObjectParameter("CVVFlag", cVVFlag) :
                new ObjectParameter("CVVFlag", typeof(string));
    
            var cVCFlagParameter = cVCFlag != null ?
                new ObjectParameter("CVCFlag", cVCFlag) :
                new ObjectParameter("CVCFlag", typeof(string));
    
            var eCommerceParameter = eCommerce != null ?
                new ObjectParameter("ECommerce", eCommerce) :
                new ObjectParameter("ECommerce", typeof(string));
    
            var mPILogFlagParameter = mPILogFlag != null ?
                new ObjectParameter("MPILogFlag", mPILogFlag) :
                new ObjectParameter("MPILogFlag", typeof(string));
    
            var cardAcceptorIdCodeParameter = cardAcceptorIdCode != null ?
                new ObjectParameter("CardAcceptorIdCode", cardAcceptorIdCode) :
                new ObjectParameter("CardAcceptorIdCode", typeof(string));
    
            var messageTypeParameter = messageType != null ?
                new ObjectParameter("MessageType", messageType) :
                new ObjectParameter("MessageType", typeof(string));
    
            var transactionDateTimeLocalParameter = transactionDateTimeLocal != null ?
                new ObjectParameter("TransactionDateTimeLocal", transactionDateTimeLocal) :
                new ObjectParameter("TransactionDateTimeLocal", typeof(string));
    
            var giccMCCParameter = giccMCC != null ?
                new ObjectParameter("GiccMCC", giccMCC) :
                new ObjectParameter("GiccMCC", typeof(string));
    
            var giccDomesticMCCParameter = giccDomesticMCC != null ?
                new ObjectParameter("GiccDomesticMCC", giccDomesticMCC) :
                new ObjectParameter("GiccDomesticMCC", typeof(string));
    
            var pOSEntryModeParameter = pOSEntryMode != null ?
                new ObjectParameter("POSEntryMode", pOSEntryMode) :
                new ObjectParameter("POSEntryMode", typeof(string));
    
            var documentationIndicatorParameter = documentationIndicator != null ?
                new ObjectParameter("DocumentationIndicator", documentationIndicator) :
                new ObjectParameter("DocumentationIndicator", typeof(string));
    
            var posTerminalTypeParameter = posTerminalType != null ?
                new ObjectParameter("PosTerminalType", posTerminalType) :
                new ObjectParameter("PosTerminalType", typeof(string));
    
            var posCardDataImputModeParameter = posCardDataImputMode != null ?
                new ObjectParameter("PosCardDataImputMode", posCardDataImputMode) :
                new ObjectParameter("PosCardDataImputMode", typeof(string));
    
            var posCardPresentParameter = posCardPresent != null ?
                new ObjectParameter("PosCardPresent", posCardPresent) :
                new ObjectParameter("PosCardPresent", typeof(string));
    
            var posCardholderPresentParameter = posCardholderPresent != null ?
                new ObjectParameter("PosCardholderPresent", posCardholderPresent) :
                new ObjectParameter("PosCardholderPresent", typeof(string));
    
            var posCardholderAuthMethodParameter = posCardholderAuthMethod != null ?
                new ObjectParameter("PosCardholderAuthMethod", posCardholderAuthMethod) :
                new ObjectParameter("PosCardholderAuthMethod", typeof(string));
    
            var expiryDateParameter = expiryDate != null ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(string));
    
            var giccRevDateParameter = giccRevDate != null ?
                new ObjectParameter("GiccRevDate", giccRevDate) :
                new ObjectParameter("GiccRevDate", typeof(string));
    
            var settleAmountImpactParameter = settleAmountImpact != null ?
                new ObjectParameter("SettleAmountImpact", settleAmountImpact) :
                new ObjectParameter("SettleAmountImpact", typeof(string));
    
            var tranAmountReqParameter = tranAmountReq != null ?
                new ObjectParameter("TranAmountReq", tranAmountReq) :
                new ObjectParameter("TranAmountReq", typeof(string));
    
            var postTranIdParameter = postTranId != null ?
                new ObjectParameter("PostTranId", postTranId) :
                new ObjectParameter("PostTranId", typeof(string));
    
            var prevPostTranIdParameter = prevPostTranId != null ?
                new ObjectParameter("PrevPostTranId", prevPostTranId) :
                new ObjectParameter("PrevPostTranId", typeof(string));
    
            var multiClearingSeqNrParameter = multiClearingSeqNr != null ?
                new ObjectParameter("MultiClearingSeqNr", multiClearingSeqNr) :
                new ObjectParameter("MultiClearingSeqNr", typeof(string));
    
            var multiClearingSeqCntParameter = multiClearingSeqCnt != null ?
                new ObjectParameter("MultiClearingSeqCnt", multiClearingSeqCnt) :
                new ObjectParameter("MultiClearingSeqCnt", typeof(string));
    
            var authSourceCodeParameter = authSourceCode != null ?
                new ObjectParameter("AuthSourceCode", authSourceCode) :
                new ObjectParameter("AuthSourceCode", typeof(string));
    
            var aVSRspCodeParameter = aVSRspCode != null ?
                new ObjectParameter("AVSRspCode", aVSRspCode) :
                new ObjectParameter("AVSRspCode", typeof(string));
    
            var marketSpecAuthParameter = marketSpecAuth != null ?
                new ObjectParameter("MarketSpecAuth", marketSpecAuth) :
                new ObjectParameter("MarketSpecAuth", typeof(string));
    
            var authRspCodeParameter = authRspCode != null ?
                new ObjectParameter("AuthRspCode", authRspCode) :
                new ObjectParameter("AuthRspCode", typeof(string));
    
            var posCardholderAuthEntityParameter = posCardholderAuthEntity != null ?
                new ObjectParameter("PosCardholderAuthEntity", posCardholderAuthEntity) :
                new ObjectParameter("PosCardholderAuthEntity", typeof(string));
    
            var posCardDataOutputAbilityParameter = posCardDataOutputAbility != null ?
                new ObjectParameter("PosCardDataOutputAbility", posCardDataOutputAbility) :
                new ObjectParameter("PosCardDataOutputAbility", typeof(string));
    
            var systemTraceAuditNrParameter = systemTraceAuditNr != null ?
                new ObjectParameter("SystemTraceAuditNr", systemTraceAuditNr) :
                new ObjectParameter("SystemTraceAuditNr", typeof(string));
    
            var datetimeTranLocalParameter = datetimeTranLocal != null ?
                new ObjectParameter("DatetimeTranLocal", datetimeTranLocal) :
                new ObjectParameter("DatetimeTranLocal", typeof(string));
    
            var merchantTypeParameter = merchantType != null ?
                new ObjectParameter("MerchantType", merchantType) :
                new ObjectParameter("MerchantType", typeof(string));
    
            var cardSeqNrParameter = cardSeqNr != null ?
                new ObjectParameter("CardSeqNr", cardSeqNr) :
                new ObjectParameter("CardSeqNr", typeof(string));
    
            var posConditionCodeParameter = posConditionCode != null ?
                new ObjectParameter("PosConditionCode", posConditionCode) :
                new ObjectParameter("PosConditionCode", typeof(string));
    
            var retrievalReferenceNrParameter = retrievalReferenceNr != null ?
                new ObjectParameter("RetrievalReferenceNr", retrievalReferenceNr) :
                new ObjectParameter("RetrievalReferenceNr", typeof(string));
    
            var authIDRspParameter = authIDRsp != null ?
                new ObjectParameter("AuthIDRsp", authIDRsp) :
                new ObjectParameter("AuthIDRsp", typeof(string));
    
            var rspCodeRspParameter = rspCodeRsp != null ?
                new ObjectParameter("RspCodeRsp", rspCodeRsp) :
                new ObjectParameter("RspCodeRsp", typeof(string));
    
            var serviceRestrictionCodeParameter = serviceRestrictionCode != null ?
                new ObjectParameter("ServiceRestrictionCode", serviceRestrictionCode) :
                new ObjectParameter("ServiceRestrictionCode", typeof(string));
    
            var terminalIDParameter = terminalID != null ?
                new ObjectParameter("TerminalID", terminalID) :
                new ObjectParameter("TerminalID", typeof(string));
    
            var cardAcceptorNameLocParameter = cardAcceptorNameLoc != null ?
                new ObjectParameter("CardAcceptorNameLoc", cardAcceptorNameLoc) :
                new ObjectParameter("CardAcceptorNameLoc", typeof(string));
    
            var posCardDataInputAbilityParameter = posCardDataInputAbility != null ?
                new ObjectParameter("PosCardDataInputAbility", posCardDataInputAbility) :
                new ObjectParameter("PosCardDataInputAbility", typeof(string));
    
            var posCardholderAuthAbilityParameter = posCardholderAuthAbility != null ?
                new ObjectParameter("PosCardholderAuthAbility", posCardholderAuthAbility) :
                new ObjectParameter("PosCardholderAuthAbility", typeof(string));
    
            var posCardCaptureAbilityParameter = posCardCaptureAbility != null ?
                new ObjectParameter("PosCardCaptureAbility", posCardCaptureAbility) :
                new ObjectParameter("PosCardCaptureAbility", typeof(string));
    
            var posOperatingEnvironmentParameter = posOperatingEnvironment != null ?
                new ObjectParameter("PosOperatingEnvironment", posOperatingEnvironment) :
                new ObjectParameter("PosOperatingEnvironment", typeof(string));
    
            var posTerminalOutputAbilityParameter = posTerminalOutputAbility != null ?
                new ObjectParameter("PosTerminalOutputAbility", posTerminalOutputAbility) :
                new ObjectParameter("PosTerminalOutputAbility", typeof(string));
    
            var posPinCaptureAbilityParameter = posPinCaptureAbility != null ?
                new ObjectParameter("PosPinCaptureAbility", posPinCaptureAbility) :
                new ObjectParameter("PosPinCaptureAbility", typeof(string));
    
            var posTerminalOperatorParameter = posTerminalOperator != null ?
                new ObjectParameter("PosTerminalOperator", posTerminalOperator) :
                new ObjectParameter("PosTerminalOperator", typeof(string));
    
            var ucafDataParameter = ucafData != null ?
                new ObjectParameter("UcafData", ucafData) :
                new ObjectParameter("UcafData", typeof(string));
    
            var tranAmountRspParameter = tranAmountRsp != null ?
                new ObjectParameter("TranAmountRsp", tranAmountRsp) :
                new ObjectParameter("TranAmountRsp", typeof(string));
    
            var tranTypeParameter = tranType != null ?
                new ObjectParameter("TranType", tranType) :
                new ObjectParameter("TranType", typeof(string));
    
            var businessDateParameter = businessDate.HasValue ?
                new ObjectParameter("BusinessDate", businessDate) :
                new ObjectParameter("BusinessDate", typeof(System.DateTime));
    
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var sourceCountryCodeParameter = sourceCountryCode != null ?
                new ObjectParameter("SourceCountryCode", sourceCountryCode) :
                new ObjectParameter("SourceCountryCode", typeof(string));
    
            var prevMessageTypeParameter = prevMessageType != null ?
                new ObjectParameter("PrevMessageType", prevMessageType) :
                new ObjectParameter("PrevMessageType", typeof(string));
    
            var prevUcafDataParameter = prevUcafData != null ?
                new ObjectParameter("PrevUcafData", prevUcafData) :
                new ObjectParameter("PrevUcafData", typeof(string));
    
            var structuredDataReqParameter = structuredDataReq != null ?
                new ObjectParameter("StructuredDataReq", structuredDataReq) :
                new ObjectParameter("StructuredDataReq", typeof(string));
    
            var dateTimeRspParameter = dateTimeRsp.HasValue ?
                new ObjectParameter("DateTimeRsp", dateTimeRsp) :
                new ObjectParameter("DateTimeRsp", typeof(System.DateTime));
    
            var processingModeParameter = processingMode.HasValue ?
                new ObjectParameter("ProcessingMode", processingMode) :
                new ObjectParameter("ProcessingMode", typeof(int));
    
            var participantIdParameter = participantId != null ?
                new ObjectParameter("ParticipantId", participantId) :
                new ObjectParameter("ParticipantId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrgIncomingTranVISA", bINParameter, aRNParameter, pANParameter, pANExtentionParameter, aCodeParameter, incomingDateParameter, settlementDateParameter, transactionCodeParameter, transactionDateParameter, originalTransactionAmountParameter, originalTransactionCurrencyCodeParameter, bookingAmountSignParameter, bookingAmountParameter, bookingAmountExponentParameter, bookingCurrencyCodeParameter, stageAmountSignParameter, stageAmountParameter, stageAmountExponentParameter, stageCurrencyCodeParameter, merchantNameParameter, merchantCityParameter, merchantCountryCodeParameter, mCCParameter, usageCodeParameter, rIdParameter, centralProcessingDateParameter, transactionIdParameter, kKOCbReferenceParameter, tIDParameter, mOTOECIParameter, destinationBinParameter, sourceBinParameter, reasonCodeParameter, memberMessageTextParameter, messageTextParameter, partialFlagParameter, returnReasonCode1Parameter, returnReasonCode2Parameter, returnReasonCode3Parameter, returnReasonCode4Parameter, returnReasonCode5Parameter, brandParameter, narritiveParameter, transactionAmountSignParameter, transactionAmountParameter, transactionAmountExponentParameter, transactionCurrencyCodeParameter, stageParameter, stageDateParameter, cVVFlagParameter, cVCFlagParameter, eCommerceParameter, mPILogFlagParameter, cardAcceptorIdCodeParameter, messageTypeParameter, transactionDateTimeLocalParameter, giccMCCParameter, giccDomesticMCCParameter, pOSEntryModeParameter, documentationIndicatorParameter, posTerminalTypeParameter, posCardDataImputModeParameter, posCardPresentParameter, posCardholderPresentParameter, posCardholderAuthMethodParameter, expiryDateParameter, giccRevDateParameter, settleAmountImpactParameter, tranAmountReqParameter, postTranIdParameter, prevPostTranIdParameter, multiClearingSeqNrParameter, multiClearingSeqCntParameter, authSourceCodeParameter, aVSRspCodeParameter, marketSpecAuthParameter, authRspCodeParameter, posCardholderAuthEntityParameter, posCardDataOutputAbilityParameter, systemTraceAuditNrParameter, datetimeTranLocalParameter, merchantTypeParameter, cardSeqNrParameter, posConditionCodeParameter, retrievalReferenceNrParameter, authIDRspParameter, rspCodeRspParameter, serviceRestrictionCodeParameter, terminalIDParameter, cardAcceptorNameLocParameter, posCardDataInputAbilityParameter, posCardholderAuthAbilityParameter, posCardCaptureAbilityParameter, posOperatingEnvironmentParameter, posTerminalOutputAbilityParameter, posPinCaptureAbilityParameter, posTerminalOperatorParameter, ucafDataParameter, tranAmountRspParameter, tranTypeParameter, businessDateParameter, fileIdParameter, sourceCountryCodeParameter, prevMessageTypeParameter, prevUcafDataParameter, structuredDataReqParameter, dateTimeRspParameter, processingModeParameter, participantIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateOrgIncomingFileErrorFlag(Nullable<int> fileId, Nullable<bool> errorFlag)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var errorFlagParameter = errorFlag.HasValue ?
                new ObjectParameter("ErrorFlag", errorFlag) :
                new ObjectParameter("ErrorFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateOrgIncomingFileErrorFlag", fileIdParameter, errorFlagParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateOrgIncomingFileParsingFinished(Nullable<int> fileId, Nullable<System.DateTimeOffset> parserEndDate)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var parserEndDateParameter = parserEndDate.HasValue ?
                new ObjectParameter("ParserEndDate", parserEndDate) :
                new ObjectParameter("ParserEndDate", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateOrgIncomingFileParsingFinished", fileIdParameter, parserEndDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateOrgIncomingFileParsingStarted(Nullable<int> fileId, Nullable<System.DateTimeOffset> parserStartDate)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var parserStartDateParameter = parserStartDate.HasValue ?
                new ObjectParameter("ParserStartDate", parserStartDate) :
                new ObjectParameter("ParserStartDate", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateOrgIncomingFileParsingStarted", fileIdParameter, parserStartDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateOrgIncomingFileStatus(Nullable<int> fileId, string organizationId, Nullable<int> parserStatus)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("FileId", fileId) :
                new ObjectParameter("FileId", typeof(int));
    
            var organizationIdParameter = organizationId != null ?
                new ObjectParameter("OrganizationId", organizationId) :
                new ObjectParameter("OrganizationId", typeof(string));
    
            var parserStatusParameter = parserStatus.HasValue ?
                new ObjectParameter("ParserStatus", parserStatus) :
                new ObjectParameter("ParserStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateOrgIncomingFileStatus", fileIdParameter, organizationIdParameter, parserStatusParameter);
        }
    
        public virtual int AddNewFeeCollectionExtract(Nullable<System.Guid> processKey, string caseId, Nullable<long> feeCollectionId, Nullable<long> feeCollectionPostilionFileId, string postilionExtractClearString, string postilionExtractWithBase64String, string postilionStatus, string postilionStatusMessage, Nullable<bool> errorFlag, Nullable<int> status, Nullable<System.DateTimeOffset> insertDate, string insertUser, ObjectParameter feeCollectionExtractId)
        {
            var processKeyParameter = processKey.HasValue ?
                new ObjectParameter("ProcessKey", processKey) :
                new ObjectParameter("ProcessKey", typeof(System.Guid));
    
            var caseIdParameter = caseId != null ?
                new ObjectParameter("CaseId", caseId) :
                new ObjectParameter("CaseId", typeof(string));
    
            var feeCollectionIdParameter = feeCollectionId.HasValue ?
                new ObjectParameter("FeeCollectionId", feeCollectionId) :
                new ObjectParameter("FeeCollectionId", typeof(long));
    
            var feeCollectionPostilionFileIdParameter = feeCollectionPostilionFileId.HasValue ?
                new ObjectParameter("FeeCollectionPostilionFileId", feeCollectionPostilionFileId) :
                new ObjectParameter("FeeCollectionPostilionFileId", typeof(long));
    
            var postilionExtractClearStringParameter = postilionExtractClearString != null ?
                new ObjectParameter("PostilionExtractClearString", postilionExtractClearString) :
                new ObjectParameter("PostilionExtractClearString", typeof(string));
    
            var postilionExtractWithBase64StringParameter = postilionExtractWithBase64String != null ?
                new ObjectParameter("PostilionExtractWithBase64String", postilionExtractWithBase64String) :
                new ObjectParameter("PostilionExtractWithBase64String", typeof(string));
    
            var postilionStatusParameter = postilionStatus != null ?
                new ObjectParameter("PostilionStatus", postilionStatus) :
                new ObjectParameter("PostilionStatus", typeof(string));
    
            var postilionStatusMessageParameter = postilionStatusMessage != null ?
                new ObjectParameter("PostilionStatusMessage", postilionStatusMessage) :
                new ObjectParameter("PostilionStatusMessage", typeof(string));
    
            var errorFlagParameter = errorFlag.HasValue ?
                new ObjectParameter("ErrorFlag", errorFlag) :
                new ObjectParameter("ErrorFlag", typeof(bool));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTimeOffset));
    
            var insertUserParameter = insertUser != null ?
                new ObjectParameter("InsertUser", insertUser) :
                new ObjectParameter("InsertUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewFeeCollectionExtract", processKeyParameter, caseIdParameter, feeCollectionIdParameter, feeCollectionPostilionFileIdParameter, postilionExtractClearStringParameter, postilionExtractWithBase64StringParameter, postilionStatusParameter, postilionStatusMessageParameter, errorFlagParameter, statusParameter, insertDateParameter, insertUserParameter, feeCollectionExtractId);
        }
    
        public virtual int AddNewRepresentmentExtract(Nullable<System.Guid> processKey, string caseId, Nullable<long> representmentId, Nullable<long> representmentPostilionFileId, string postilionExtractClearString, string postilionExtractWithBase64String, string postilionStatus, string postilionStatusMessage, Nullable<bool> errorFlag, Nullable<int> status, Nullable<System.DateTimeOffset> insertDate, string insertUser, ObjectParameter representmentExtractId)
        {
            var processKeyParameter = processKey.HasValue ?
                new ObjectParameter("ProcessKey", processKey) :
                new ObjectParameter("ProcessKey", typeof(System.Guid));
    
            var caseIdParameter = caseId != null ?
                new ObjectParameter("CaseId", caseId) :
                new ObjectParameter("CaseId", typeof(string));
    
            var representmentIdParameter = representmentId.HasValue ?
                new ObjectParameter("RepresentmentId", representmentId) :
                new ObjectParameter("RepresentmentId", typeof(long));
    
            var representmentPostilionFileIdParameter = representmentPostilionFileId.HasValue ?
                new ObjectParameter("RepresentmentPostilionFileId", representmentPostilionFileId) :
                new ObjectParameter("RepresentmentPostilionFileId", typeof(long));
    
            var postilionExtractClearStringParameter = postilionExtractClearString != null ?
                new ObjectParameter("PostilionExtractClearString", postilionExtractClearString) :
                new ObjectParameter("PostilionExtractClearString", typeof(string));
    
            var postilionExtractWithBase64StringParameter = postilionExtractWithBase64String != null ?
                new ObjectParameter("PostilionExtractWithBase64String", postilionExtractWithBase64String) :
                new ObjectParameter("PostilionExtractWithBase64String", typeof(string));
    
            var postilionStatusParameter = postilionStatus != null ?
                new ObjectParameter("PostilionStatus", postilionStatus) :
                new ObjectParameter("PostilionStatus", typeof(string));
    
            var postilionStatusMessageParameter = postilionStatusMessage != null ?
                new ObjectParameter("PostilionStatusMessage", postilionStatusMessage) :
                new ObjectParameter("PostilionStatusMessage", typeof(string));
    
            var errorFlagParameter = errorFlag.HasValue ?
                new ObjectParameter("ErrorFlag", errorFlag) :
                new ObjectParameter("ErrorFlag", typeof(bool));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTimeOffset));
    
            var insertUserParameter = insertUser != null ?
                new ObjectParameter("InsertUser", insertUser) :
                new ObjectParameter("InsertUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewRepresentmentExtract", processKeyParameter, caseIdParameter, representmentIdParameter, representmentPostilionFileIdParameter, postilionExtractClearStringParameter, postilionExtractWithBase64StringParameter, postilionStatusParameter, postilionStatusMessageParameter, errorFlagParameter, statusParameter, insertDateParameter, insertUserParameter, representmentExtractId);
        }
    
        public virtual ObjectResult<GetFeeCollectionExtract_Result> GetFeeCollectionExtract(Nullable<long> feeCollectionExtractId)
        {
            var feeCollectionExtractIdParameter = feeCollectionExtractId.HasValue ?
                new ObjectParameter("FeeCollectionExtractId", feeCollectionExtractId) :
                new ObjectParameter("FeeCollectionExtractId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFeeCollectionExtract_Result>("GetFeeCollectionExtract", feeCollectionExtractIdParameter);
        }
    
        public virtual ObjectResult<GetRepresentmentExtract_Result> GetRepresentmentExtract(Nullable<long> representmentExtractId)
        {
            var representmentExtractIdParameter = representmentExtractId.HasValue ?
                new ObjectParameter("RepresentmentExtractId", representmentExtractId) :
                new ObjectParameter("RepresentmentExtractId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRepresentmentExtract_Result>("GetRepresentmentExtract", representmentExtractIdParameter);
        }
    
        public virtual int AddNotification(Nullable<System.DateTimeOffset> messageDate, string message, string messageType, Nullable<System.DateTimeOffset> insertDate, string insertUser)
        {
            var messageDateParameter = messageDate.HasValue ?
                new ObjectParameter("MessageDate", messageDate) :
                new ObjectParameter("MessageDate", typeof(System.DateTimeOffset));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var messageTypeParameter = messageType != null ?
                new ObjectParameter("MessageType", messageType) :
                new ObjectParameter("MessageType", typeof(string));
    
            var insertDateParameter = insertDate.HasValue ?
                new ObjectParameter("InsertDate", insertDate) :
                new ObjectParameter("InsertDate", typeof(System.DateTimeOffset));
    
            var insertUserParameter = insertUser != null ?
                new ObjectParameter("InsertUser", insertUser) :
                new ObjectParameter("InsertUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNotification", messageDateParameter, messageParameter, messageTypeParameter, insertDateParameter, insertUserParameter);
        }
    }
}
